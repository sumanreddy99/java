<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Migrating a namespace-scoped Operator to a cluster-scoped Operator</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/B4uG7fDxSK4/" /><category term="clusterrole" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="k8s" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Kubernetes Operator" scheme="searchisko:content:tags" /><category term="operator" scheme="searchisko:content:tags" /><category term="rolebinding" scheme="searchisko:content:tags" /><author><name>akoserwa</name></author><id>searchisko:content:id:jbossorg_blog-migrating_a_namespace_scoped_operator_to_a_cluster_scoped_operator</id><updated>2020-06-26T07:00:07Z</updated><published>2020-06-26T07:00:07Z</published><content type="html">&lt;p&gt;Within the context of Kubernetes, a namespace allows dividing resources, policies, authorization, and a boundary for cluster objects. In this article, we cover two different types of Operators: namespace-scoped and cluster-scoped. We then walk through an example of how to migrate from one to the other, which illustrates the difference between the two.&lt;/p&gt; &lt;h2&gt;Namespace-scoped and cluster-scoped&lt;/h2&gt; &lt;p&gt;A namespace-scoped Operator is defined within the boundary of a namespace with the flexibility to handle upgrades without impacting others. It watches objects within that namespace and maintains &lt;code&gt;Role&lt;/code&gt; and &lt;code&gt;RoleBinding&lt;/code&gt; for role-based access control (RBAC) policies for accessing the resource.&lt;/p&gt; &lt;p&gt;Meanwhile, a cluster-scoped Operator promotes reusability and manages defined resources across the cluster. It watches all namespaces in a cluster and maintains &lt;code&gt;ClusterRole&lt;/code&gt; and &lt;code&gt;ClusterRoleBinding&lt;/code&gt; for RBAC policies for authorizing cluster objects. Two examples of cluster-scoped operators are &lt;a target="_blank" rel="nofollow" href="https://github.com/istio/operator"&gt;istio-operator&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://github.com/jetstack/cert-manager"&gt;cert-manager&lt;/a&gt;. The istio-operator can be deployed as a cluster-scoped to manage the service mesh for an entire cluster, while the cert-manager is used to issue certificates for an entire cluster.&lt;/p&gt; &lt;p&gt;These two types of Operators support both types of installation based on your requirements. In the case of a cluster-scoped Operator, upgrading the Operator version can impact resources managed by the Operator in the entire cluster, as compared to upgrading the namespace-scoped Operator, which will be easier to upgrade as it only affects the resource within its scope.&lt;/p&gt; &lt;p&gt;&lt;span id="more-721857"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Migration guide: Namespace-scoped to cluster-scoped&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s generate two Operators: &lt;code&gt;namespace-scope-op&lt;/code&gt; and &lt;code&gt;cluster-scope-op&lt;/code&gt; using &lt;code&gt;operator-sdk&lt;/code&gt;&lt;em class="jd"&gt;:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;$ operator-sdk new namespace-scope-op $ operator-sdk new cluster-scope-op&lt;/pre&gt; &lt;p&gt;By default, both Operators are namespace-scoped. Let’s add the &lt;code&gt;kind&lt;/code&gt; type &lt;code&gt;Foo&lt;/code&gt; to both of these Operators:&lt;/p&gt; &lt;pre&gt;$ operator-sdk add api --api-version=foo.example.com/v1alpha1 --kind=Foo&lt;/pre&gt; &lt;p&gt;I’ll now make changes to the cluster-scope Operator to show how it is different from the namespace-scope Operator.&lt;/p&gt; &lt;h3&gt;&lt;strong class="bn"&gt;Step 1: Watch all of the namespaces&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;The first change we need to make in the &lt;code&gt;cluster-scope-op&lt;/code&gt; Operator is keeping the namespace option set to empty. To watch all of the namespaces, run:&lt;/p&gt; &lt;pre&gt;$ cluster-scope-op/cmd/manager/main.go&lt;/pre&gt; &lt;p&gt;Figure 1 shows the difference between the results for cluster-scope on the left and namespace-scope on the right.&lt;/p&gt; &lt;div id="attachment_734117" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator.png"&gt;&lt;img aria-describedby="caption-attachment-734117" class="wp-image-734117 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-1024x76.png" alt="Screenshot of the output for both scopes" width="640" height="48" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-1024x76.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-300x22.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-768x57.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-734117" class="wp-caption-text"&gt;Figure 1: Comparison: Watching all of the namespaces.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 2: Update the added API schema&amp;#8217;s scope&lt;/h3&gt; &lt;p&gt;Next, we need to update our API type: &lt;code&gt;*_types.go&lt;/code&gt;&lt;em class="jd"&gt;. &lt;/em&gt;If you were setting the namespace scope, you would use:&lt;/p&gt; &lt;pre&gt;// +kubebuilder:resource:path=foos,scope=Namespaced&lt;/pre&gt; &lt;p&gt;To set the cluster scope, use:&lt;/p&gt; &lt;pre&gt;// +kubebuilder:resource:path=foos,scope=Cluster&lt;/pre&gt; &lt;p&gt;Figure 2 shows the difference between the results for cluster-scope on the left and namespace-scope on the right.&lt;/p&gt; &lt;div id="attachment_734157" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-2.png"&gt;&lt;img aria-describedby="caption-attachment-734157" class="wp-image-734157 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-2-1024x209.png" alt="Screenshot of the output for both scopes" width="640" height="131" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-2-1024x209.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-2-300x61.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-2-768x157.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-734157" class="wp-caption-text"&gt;Figure 2: Updating the added API schema&amp;#8217;s scope.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;&lt;strong class="hb jo"&gt;Step 3: Generate the CRDs for the cluster-scope Operator&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Now it&amp;#8217;s time to generate the custom resource definitions (CRDs) for the cluster-scope Operator:&lt;/p&gt; &lt;pre&gt;cluster-scope-op-:$ operator-sdk generate crds INFO[0000] Running CRD generator. INFO[0000] CRD generation complete.&lt;/pre&gt; &lt;p&gt;Figure 3 shows that the generated CRD was updated for the cluster-scope Operator (on the left) in &lt;code&gt;*crd*.yaml&lt;/code&gt;.&lt;/p&gt; &lt;div id="attachment_734177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-3.png"&gt;&lt;img aria-describedby="caption-attachment-734177" class="wp-image-734177 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-3-1024x174.png" alt="screenshot showing the changed CRD on the left" width="640" height="109" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-3-1024x174.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-3-300x51.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-3-768x130.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-734177" class="wp-caption-text"&gt;Figure 3: Generating the CRDs for cluster-scope.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 4: Update the kind type&lt;/h3&gt; &lt;p&gt;At this point, we update the &lt;code&gt;kind&lt;/code&gt; type for &lt;code&gt;Role&lt;/code&gt;/&lt;code&gt;RoleBinding&lt;/code&gt; to &lt;code&gt;ClusterRole&lt;/code&gt;/&lt;code&gt;ClusterRoleBinding&lt;/code&gt;.  First, update the &lt;code&gt;kind&lt;/code&gt; type from &lt;code&gt;Role&lt;/code&gt;to &lt;code&gt;ClusterRole&lt;/code&gt; in &lt;code&gt;role.yaml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;kind: ClusterRole&lt;/pre&gt; &lt;p&gt;Then, update the &lt;code&gt;kind&lt;/code&gt; type&lt;code&gt;RoleBinding&lt;/code&gt; to &lt;code&gt;ClusterRoleBinding&lt;/code&gt; and the kind &lt;code&gt;roleRef&lt;/code&gt; to &lt;code&gt;ClusterRole&lt;/code&gt; in &lt;code&gt;role_binding.yaml&lt;/code&gt;:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata: name: cluster-scope-op subjects: - kind: ServiceAccount name: cluster-scope-op namespace: ${NAMESPACE} roleRef: kind: ClusterRole name: cluster-scope-op apiGroup: rbac.authorization.k8s.io&lt;/pre&gt; &lt;/blockquote&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Caution&lt;/strong&gt;: The exact resource/verb needed should be specified in the cluster role. Avoid using a wildcard (*) permission for security concerns when defining cluster roles.&lt;/p&gt; &lt;p&gt;The cluster-scoped Operator will be deployed under a namespace, but the Operator is used to manage the resources in a cluster-wide scope. As compared to namespace scoped Operator, which is deployed under a namespace, but only manage resources under that namespace.&lt;/p&gt; &lt;h3&gt;Step 5: Update the WATCH_NAMESPACE&lt;/h3&gt; &lt;p&gt;Finally, we can add a controller by updating &lt;code&gt;WATCH_NAMESPACE&lt;/code&gt; to an empty string in &lt;code&gt;operator.yaml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ operator-sdk add controller --api-version=cache.example.com/v1alpha1 --kind=Foo&lt;/pre&gt; &lt;p&gt;Figure 4 shows how this section looks now for the cluster-scope Operator (on the left) compared to the namespace-scope on the right.&lt;/p&gt; &lt;div id="attachment_734207" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-4.png"&gt;&lt;img aria-describedby="caption-attachment-734207" class="wp-image-734207 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-4-1024x103.png" alt="" width="640" height="64" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-4-1024x103.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-4-300x30.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/cluster-namescape-scoped-operator-4-768x77.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-734207" class="wp-caption-text"&gt;Figure 4: Updating the WATCH_NAMESPACE.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Keep in mind that you need watchers that are entitled to watch the object within the cluster, which are generated by default for the primary object.&lt;/p&gt; &lt;h3&gt;Operator Lifecycle Manager&lt;/h3&gt; &lt;p&gt;If you want to use the Operator Lifecycle Manager (OLM) for deploying the Operator, you can generate the CSV using the command:&lt;/p&gt; &lt;pre&gt;$ operator-sdk generate csv --csv-version 0.0.1&lt;/pre&gt; &lt;p&gt;You can support &lt;code&gt;installModes&lt;/code&gt; as you see &lt;a target="_blank" rel="nofollow" href="https://github.com/akoserwal/ex-cluster-vs-namespace-operator/blob/master/cluster-scope-op/deploy/olm-catalog/cluster-scope-op/0.0.1/cluster-scope-op.v0.0.1.clusterserviceversion.yaml#L143"&gt;in this CSV&lt;/a&gt;. By default, this CSV supports all installModes:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;installModes:- supported: true type: OwnNamespace- supported: true type: SingleNamespace- supported: false type: MultiNamespace- supported: true type: AllNamespaces&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;You can also define an Operator group. An &lt;code&gt;OperatorGroup&lt;/code&gt; is an OLM resource that provides multitenant configuration to OLM-installed Operators:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;apiVersion: operators.coreos.com/v1 kind: OperatorGroup metadata: name: my-group namespace: my-namespace spec: targetNamespaces: - my-namespace - my-other-namespace - my-other-other-namespace&lt;/pre&gt; &lt;/blockquote&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This is all you need to know in order to make your namespace Operator into a cluster-scoped Operator. Both Operator examples &lt;a target="_blank" rel="nofollow" href="https://github.com/akoserwal/ex-cluster-vs-namespace-operator"&gt;can be found in this repo&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F26%2Fmigrating-a-namespace-scoped-operator-to-a-cluster-scoped-operator%2F&amp;#38;linkname=Migrating%20a%20namespace-scoped%20Operator%20to%20a%20cluster-scoped%20Operator" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F26%2Fmigrating-a-namespace-scoped-operator-to-a-cluster-scoped-operator%2F&amp;#38;linkname=Migrating%20a%20namespace-scoped%20Operator%20to%20a%20cluster-scoped%20Operator" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F26%2Fmigrating-a-namespace-scoped-operator-to-a-cluster-scoped-operator%2F&amp;#38;linkname=Migrating%20a%20namespace-scoped%20Operator%20to%20a%20cluster-scoped%20Operator" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F26%2Fmigrating-a-namespace-scoped-operator-to-a-cluster-scoped-operator%2F&amp;#38;linkname=Migrating%20a%20namespace-scoped%20Operator%20to%20a%20cluster-scoped%20Operator" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F26%2Fmigrating-a-namespace-scoped-operator-to-a-cluster-scoped-operator%2F&amp;#38;linkname=Migrating%20a%20namespace-scoped%20Operator%20to%20a%20cluster-scoped%20Operator" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F26%2Fmigrating-a-namespace-scoped-operator-to-a-cluster-scoped-operator%2F&amp;#38;linkname=Migrating%20a%20namespace-scoped%20Operator%20to%20a%20cluster-scoped%20Operator" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F26%2Fmigrating-a-namespace-scoped-operator-to-a-cluster-scoped-operator%2F&amp;#38;linkname=Migrating%20a%20namespace-scoped%20Operator%20to%20a%20cluster-scoped%20Operator" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F26%2Fmigrating-a-namespace-scoped-operator-to-a-cluster-scoped-operator%2F&amp;#038;title=Migrating%20a%20namespace-scoped%20Operator%20to%20a%20cluster-scoped%20Operator" data-a2a-url="https://developers.redhat.com/blog/2020/06/26/migrating-a-namespace-scoped-operator-to-a-cluster-scoped-operator/" data-a2a-title="Migrating a namespace-scoped Operator to a cluster-scoped Operator"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/26/migrating-a-namespace-scoped-operator-to-a-cluster-scoped-operator/"&gt;Migrating a namespace-scoped Operator to a cluster-scoped Operator&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/B4uG7fDxSK4" height="1" width="1" alt=""/&gt;</content><summary>Within the context of Kubernetes, a namespace allows dividing resources, policies, authorization, and a boundary for cluster objects. In this article, we cover two different types of Operators: namespace-scoped and cluster-scoped. We then walk through an example of how to migrate from one to the other, which illustrates the difference between the two. Namespace-scoped and cluster-scoped A namespac...</summary><dc:creator>akoserwa</dc:creator><dc:date>2020-06-26T07:00:07Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/26/migrating-a-namespace-scoped-operator-to-a-cluster-scoped-operator/</feedburner:origLink></entry><entry><title>This Week in JBoss: 26 June 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/mRqiO6HIetg/weekly-2020-06-26.html" /><category term="Camel" scheme="searchisko:content:tags" /><category term="Data Grid" scheme="searchisko:content:tags" /><category term="editorial" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><author><name>Jason Porter</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_26_june_2020</id><updated>2020-06-26T00:00:00Z</updated><published>2020-06-26T00:00:00Z</published><content type="html">&lt;article class="" data-tags="quarkus, data grid, camel, editorial,"&gt; &lt;h1&gt;This Week in JBoss: 26 June 2020&lt;/h1&gt; &lt;p&gt;Here we are, once again at the close of June. Another summer has begun, albeit a little different than most. I hope everyone is safe, healthy, and doing well. There have been some very interesting blogs posted in the past couple of weeks that we’ll discuss in this edition, as well as a few releases.&lt;/p&gt; &lt;p&gt;Operators in Kubernetes provide an extension point for the platform. They follow a pattern allowing you to manage resources and applications within the cluster. An operator can be either namespace-scoped or cluster-scoped. Did you know, however, that you can convert between the two? That is exactly what Abhishek Koserwal details in six steps over on the &lt;a href="https://developers.redhat.com/blog/2020/06/26/migrating-a-namespace-scoped-operator-to-a-cluster-scoped-operator/"&gt;Red Hat Developer blog&lt;/a&gt;. Abhishek walks you through a basic example and provides the full example as a GitHub repo. Read the article for more information, and reasons why you may want or need to switch between the different scopes.&lt;/p&gt; &lt;p&gt;Multitenancy may be something you deal with everyday, or it may be something you’re looking at adding to your current application base. Either way, dealing with persistence can be tricky. Tenants must not see each other’s data, but be allowed to operate simultaneously. Your application must also perform well while still being easy to maintain. Rhuan Rocha has started a two part series on how to use JPA with Multitenancy over on the Red Hat Developer blog. &lt;a href="https://developers.redhat.com/blog/2020/06/15/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-1/"&gt;The first entry&lt;/a&gt; details the problem and presents a possible solution using WildFly and EJBs. Expect the next installment to look more at Hibernate and JPA solutions.&lt;/p&gt; &lt;p&gt;Effortlessly building a native application is of course, one of the amazing capabilities of Quarkus. However, when it comes to debugging, a native Quarkus application makes debugging &lt;strong&gt;very&lt;/strong&gt; difficult. A large part of this is the optimizations that happen to create that quick, small, native binary. This debugging complication hasn’t gone unnoticed. Andrew Dinn has been working on this problem. He contributed a solution where the debug information is embedded with in the native image and can be access with &lt;code&gt;gdb&lt;/code&gt;. If you’d like to learn more about the solution, &lt;a href="https://developers.redhat.com/blog/2020/06/25/debugging-graalvm-native-images-using-gdb/"&gt;read Andrew’s blog entry&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Continuing with the Quarkus theme, Durgesh Anaokar wrote about &lt;a href="https://developers.redhat.com/blog/2020/06/19/develop-and-test-a-quarkus-client-on-red-hat-codeready-containers-with-red-hat-data-grid-8-0/"&gt;developing and testing a Quarkus Red Hat Data Grid client using Red Hat CodeReady Containers&lt;/a&gt;. Durgesh details installing CRC (Red Hat Code Ready Containers) and Data Grid on OpenShift 4 as well as running the client. Naturally, his project code is hosted in GitHub, you’ll find that link in his blog entry.&lt;/p&gt; &lt;p&gt;Red Hat now has images, Universal Base Images to be exact, of OpenJDK (8 and 11) in Red Hat Enterprise Linux 8.2. A Universal Base Image (UBI) is an OCI-compliant container base OS image with runtime and language support that can be used as the base for Docker images and Podman/Buildah images. These will allow you to deploy and build supportable applications on Red Hat OpenShift and RHEL. It also includes a number of additional user-space packages over a base UBI. Read more about this &lt;a href="https://developers.redhat.com/blog/2020/06/25/introducing-the-red-hat-build-of-the-openjdk-universal-base-images-now-in-red-hat-enterprise-linux-8-2/"&gt;over at Red Hat Developers&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you have been following, you’ll know the Infinispan team has been hard at work on Infinispan 11. They are proud to announce that &lt;a href="https://infinispan.org/blog/2020/06/15/infinispan-11/"&gt;Inifinspan 11.0.0. Final has been released&lt;/a&gt;! A number of improvements and features have been added to this release including clustering, CLI, Hot Rod Client improvements, non-blocking internals, and others.&lt;/p&gt; &lt;p&gt;Along with that new Infinispan release, you can now deploy a &lt;a href="https://infinispan.org/blog/2020/06/16/native-server-announce/"&gt;natively compiled version of the Infinispan server&lt;/a&gt;! The memory footprint is only 286MB. There are also native Quarkus extensions for your Quarkus based applications.&lt;/p&gt; &lt;p&gt;Not to be left out of the cloud native party, Apache Camel is &lt;a href="https://developers.redhat.com/blog/2020/06/18/camel-k-1-0-the-serverless-integration-platform-goes-ga/"&gt;announcing the GA release of Apache Camel K 1.0&lt;/a&gt;. This release includes tooling, connectors, and integrations with Knative. This is a great step forward for doing integrations with a small footprint.&lt;/p&gt; &lt;p&gt;Lastly, &lt;a href="https://developers.redhat.com/blog/2020/06/17/red-hat-jboss-enterprise-application-platform-expansion-pack-1-0-released/"&gt;Red Hat JBoss Enterprise Application Platform Expansion Pack 1.0&lt;/a&gt; was recently released. This is a patch that adds MicroProfile capabilities to JBoss EAP. There are some policy changes you will need to be aware of, but you find links to all of thosewithin the announcement.&lt;/p&gt; &lt;p&gt;Thanks again for being with us on another JBoss Editorial!&lt;/p&gt; &lt;div class="author"&gt; &lt;pfe-avatar pfe-shape="circle" pfe-pattern="squares" pfe-src="/img/people/jason-porter.png"&gt;&lt;/pfe-avatar&gt; &lt;span&gt;Jason Porter&lt;/span&gt; &lt;/div&gt;&lt;/article&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/mRqiO6HIetg" height="1" width="1" alt=""/&gt;</content><summary>This Week in JBoss: 26 June 2020 Here we are, once again at the close of June. Another summer has begun, albeit a little different than most. I hope everyone is safe, healthy, and doing well. There have been some very interesting blogs posted in the past couple of weeks that we’ll discuss in this edition, as well as a few releases. Operators in Kubernetes provide an extension point for the platfor...</summary><dc:creator>Jason Porter</dc:creator><dc:date>2020-06-26T00:00:00Z</dc:date><feedburner:origLink>https://www.jboss.org/posts/weekly-2020-06-26.html</feedburner:origLink></entry><entry><title>Introducing the Red Hat build of the OpenJDK Universal Base Images—now in Red Hat Enterprise Linux 8.2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/8vc6PICYdWs/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="docker" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="OpenJDK 11" scheme="searchisko:content:tags" /><category term="OpenJDK 8" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Podman" scheme="searchisko:content:tags" /><category term="Universal Base Images (UBI)" scheme="searchisko:content:tags" /><author><name>Ezequiel Aguilar</name></author><id>searchisko:content:id:jbossorg_blog-introducing_the_red_hat_build_of_the_openjdk_universal_base_images_now_in_red_hat_enterprise_linux_8_2</id><updated>2020-06-25T07:00:37Z</updated><published>2020-06-25T07:00:37Z</published><content type="html">&lt;p&gt;With the recent release of &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/8.2_release_notes/index"&gt;Red Hat Enterprise Linux 8.2&lt;/a&gt;, we also added the first &lt;a href="https://developers.redhat.com/products/openjdk/"&gt;Red Hat build of OpenJDK Universal Base Images&lt;/a&gt;. These General Availability (GA) images for OpenJDK 8 and OpenJDK 11 set a new baseline for anyone who wants to develop Java applications that run inside containers in a secure, stable, and tested manner.&lt;/p&gt; &lt;p&gt;In this article, we introduce the new OpenJDK Universal Base Images and explain their benefits for Java developers. Before we do that, let&amp;#8217;s quickly review what we know about UBIs in general.&lt;/p&gt; &lt;h2&gt;About Universal Base Images&lt;/h2&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/articles/ubi-faq/#resources"&gt;Red Hat Universal Base Images (UBIs) are&lt;/a&gt;:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;OCI-compliant container base operating system images with complementary runtime languages and packages that are freely redistributable. Like previous base images, they are built from portions of &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Red Hat Enterprise Linux (RHEL)&lt;/a&gt;. &lt;a href="https://developers.redhat.com/blog/category/ubi/"&gt;UBI images&lt;/a&gt; can be obtained from the Red Hat container catalog and be built and deployed anywhere.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;In other words, UBIs help application developers reach the secure, stable, and portable world of &lt;a href="https://developers.redhat.com/topics/containers/"&gt;containers&lt;/a&gt;. These images are accessible using well-known tools like Podman/Buildah and Docker. Red Hat Universal Base Images also allow users to build and distribute their own applications on top of enterprise-quality bits that are supportable on &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt; and Red Hat Enterprise Linux.&lt;/p&gt; &lt;p&gt;&lt;span id="more-734777"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The Red Hat build of OpenJDK&lt;/h2&gt; &lt;p&gt;The &lt;a href="https://developers.redhat.com/products/openjdk/overview"&gt;Red Hat build of OpenJDK&lt;/a&gt; is based on the upstream OpenJDK 8u and OpenJDK 11u community-led projects. Red Hat provides significant contributors to both projects and adds additional future features into Red Hat builds.&lt;/p&gt; &lt;p&gt;This version includes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;a target="_blank" rel="nofollow" href="https://wiki.openjdk.java.net/display/shenandoah"&gt;Shenandoah ultra-low pause time garbage collector&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Several installation options, including RPM, MSI installers, and also a ZIP version.&lt;/li&gt; &lt;li&gt;Java Web Start support (Windows only; for Linux, please use the Red Hat Enterprise Linux RPMs).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The Red Hat build of OpenJDK is updated at least once per quarter for security and other bug-fix enhancements. Red Hat offers support and maintenance over stated periods for the major versions of OpenJDK. In this case, we offer long-term supported (LTS) versions until June 2026 and October 2024 for versions 8 and 11, respectively. (See also: &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/1299013"&gt;OpenJDK Life Cycle and Support Policy&lt;/a&gt;.)&lt;/p&gt; &lt;p&gt;For more information, check out the new images in the Red Hat Ecosystem Catalog:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/containers/?tab=package-list#/registry.access.redhat.com/ubi8/openjdk-8/images/1.3-2"&gt;OpenJDK 8 UBI8 Image&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/containers/?tab=package-list#/registry.access.redhat.com/ubi8/openjdk-8/images/1.3-2"&gt;OpenJDK 11 UBI8 Image&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Get started with the OpenJDK UBI images&lt;/h2&gt; &lt;p&gt;The OpenJDK UBI images have default startup scripts that automatically detect application JARs and launch Java. The script&amp;#8217;s behavior can be customized using environment variables. Take a look at &lt;code&gt;/help.md&lt;/code&gt; within the container to find out more.&lt;/p&gt; &lt;p&gt;Meanwhile, here is a brief example of a Dockerfile that adds an application called &lt;code&gt;testubi.jar&lt;/code&gt; to the OpenJDK 11  UBI8 Image:&lt;/p&gt; &lt;pre&gt;FROM registry.access.redhat.com/ubi8/openjdk-11 COPY target/testubi.jar /deployments/testubi.jar&lt;/pre&gt; &lt;h2&gt;Extending the Universal Base Image EULA&lt;/h2&gt; &lt;p&gt;When we introduced Universal Base Images in May 2019, we included an end-user license agreement (EULA) that gave Red Hat partners the ability to freely use and redistribute a substantial number of RHEL packages that can be deployed on both Red Hat and non-Red Hat platforms. Under this agreement, developers could build safe, secure, and portable container-based software and deploy it anywhere. The feedback has been overwhelmingly positive, and we thank you for it! We also learned that you needed more, so we&amp;#8217;re expanding the package set for customers.&lt;/p&gt; &lt;p&gt;Application developers in the Red Hat Partner Connect program can now build container apps from the full set of Red Hat Enterprise Linux (RHEL) user-space packages (non-kernel) and redistribute them through the container registry of their choice. This extension nearly triples the number of packages available compared to UBI-only.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;See also&lt;/strong&gt;: &lt;a href="https://developers.redhat.com/blog/2020/02/26/red-hat-simplifies-container-dev-and-redistribution-rhel-packages/"&gt;Red Hat simplifies container development and redistribution of Red Hat Enterprise Linux packages&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;If you are looking to develop Java applications in a container—and you also want to be able to trust the underlying base in terms of security, reliability, and stability—then the OpenJDK UBI8 images could be the solution that you are seeking. We hope you will try the new OpenJDK Universal Base Images for building containerized Java applications in a hybrid cloud.&lt;/p&gt; &lt;p&gt;In the coming weeks, we will continue this update with a more detailed introduction to working with the OpenJDK UBIs, including more examples of how to handle OpenJDK UBI8 container images. Stay tuned!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fintroducing-the-red-hat-build-of-the-openjdk-universal-base-images-now-in-red-hat-enterprise-linux-8-2%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20the%20OpenJDK%20Universal%20Base%20Images%E2%80%94now%20in%20Red%20Hat%20Enterprise%20Linux%208.2" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fintroducing-the-red-hat-build-of-the-openjdk-universal-base-images-now-in-red-hat-enterprise-linux-8-2%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20the%20OpenJDK%20Universal%20Base%20Images%E2%80%94now%20in%20Red%20Hat%20Enterprise%20Linux%208.2" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fintroducing-the-red-hat-build-of-the-openjdk-universal-base-images-now-in-red-hat-enterprise-linux-8-2%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20the%20OpenJDK%20Universal%20Base%20Images%E2%80%94now%20in%20Red%20Hat%20Enterprise%20Linux%208.2" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fintroducing-the-red-hat-build-of-the-openjdk-universal-base-images-now-in-red-hat-enterprise-linux-8-2%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20the%20OpenJDK%20Universal%20Base%20Images%E2%80%94now%20in%20Red%20Hat%20Enterprise%20Linux%208.2" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fintroducing-the-red-hat-build-of-the-openjdk-universal-base-images-now-in-red-hat-enterprise-linux-8-2%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20the%20OpenJDK%20Universal%20Base%20Images%E2%80%94now%20in%20Red%20Hat%20Enterprise%20Linux%208.2" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fintroducing-the-red-hat-build-of-the-openjdk-universal-base-images-now-in-red-hat-enterprise-linux-8-2%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20the%20OpenJDK%20Universal%20Base%20Images%E2%80%94now%20in%20Red%20Hat%20Enterprise%20Linux%208.2" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fintroducing-the-red-hat-build-of-the-openjdk-universal-base-images-now-in-red-hat-enterprise-linux-8-2%2F&amp;#38;linkname=Introducing%20the%20Red%20Hat%20build%20of%20the%20OpenJDK%20Universal%20Base%20Images%E2%80%94now%20in%20Red%20Hat%20Enterprise%20Linux%208.2" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fintroducing-the-red-hat-build-of-the-openjdk-universal-base-images-now-in-red-hat-enterprise-linux-8-2%2F&amp;#038;title=Introducing%20the%20Red%20Hat%20build%20of%20the%20OpenJDK%20Universal%20Base%20Images%E2%80%94now%20in%20Red%20Hat%20Enterprise%20Linux%208.2" data-a2a-url="https://developers.redhat.com/blog/2020/06/25/introducing-the-red-hat-build-of-the-openjdk-universal-base-images-now-in-red-hat-enterprise-linux-8-2/" data-a2a-title="Introducing the Red Hat build of the OpenJDK Universal Base Images—now in Red Hat Enterprise Linux 8.2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/25/introducing-the-red-hat-build-of-the-openjdk-universal-base-images-now-in-red-hat-enterprise-linux-8-2/"&gt;Introducing the Red Hat build of the OpenJDK Universal Base Images—now in Red Hat Enterprise Linux 8.2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/8vc6PICYdWs" height="1" width="1" alt=""/&gt;</content><summary>With the recent release of Red Hat Enterprise Linux 8.2, we also added the first Red Hat build of OpenJDK Universal Base Images. These General Availability (GA) images for OpenJDK 8 and OpenJDK 11 set a new baseline for anyone who wants to develop Java applications that run inside containers in a secure, stable, and tested manner. In this article, we introduce the new OpenJDK Universal Base Images...</summary><dc:creator>Ezequiel Aguilar</dc:creator><dc:date>2020-06-25T07:00:37Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/25/introducing-the-red-hat-build-of-the-openjdk-universal-base-images-now-in-red-hat-enterprise-linux-8-2/</feedburner:origLink></entry><entry><title>Debugging GraalVM-native images using gdb</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/C4Sx6Di6PQo/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="debug java application" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="graalvm native" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="java gdb" scheme="searchisko:content:tags" /><category term="jdk runtime" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="OpenJDK" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><author><name>Andrew Dinn</name></author><id>searchisko:content:id:jbossorg_blog-debugging_graalvm_native_images_using_gdb</id><updated>2020-06-25T07:00:20Z</updated><published>2020-06-25T07:00:20Z</published><content type="html">&lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://www.graalvm.org/"&gt;GraalVM project&lt;/a&gt; includes, amongst other capabilities, a component called &lt;a target="_blank" rel="nofollow" href="https://www.graalvm.org/docs/reference-manual/native-image/"&gt;GraalVM Native Image&lt;/a&gt;. GraalVM Native Image supports the delivery of &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; applications as shrink-wrapped, self-contained, standalone executables, commonly referred to as Java-native images. Native images often have a smaller footprint and faster startup time compared to running the same application in the traditional way on the JVM. This is often a win for short-running applications or small, &lt;a href="https://developers.redhat.com/topics/containers/"&gt;container&lt;/a&gt;-based services. The trade-off is usually lower peak &lt;a href="https://developers.redhat.com/blog/category/performance/"&gt;performance&lt;/a&gt; for long-running programs, and higher garbage collection overheads and latencies for programs with large amounts of resident data.&lt;/p&gt; &lt;p&gt;We are especially interested in GraalVM-native images as an alternative back-end delivery option for applications based on &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt;. The Java team has worked hard to ensure that &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; is well integrated with GraalVM Native Images. In the process, they have found that one important usability issue is the ability to debug the delivered native image.&lt;/p&gt; &lt;p&gt;&lt;span id="more-723337"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Of course, this is not primarily a development problem. Most of the hard work of debugging an application can be done on the JVM during development and testing. However, there is always the question of what to do if a deployed native image behaves differently. While that should not happen, it may occur because of errors in the application, or problems configuring the build. In rare cases, a deployed native image might behave differently because of a disparity introduced by the native compilation process when compiling either application code or JDK runtime code to native machine code.&lt;/p&gt; &lt;p&gt;What makes debugging hard is that a generated native image is heavily optimized code with minimal symbol information. Much of the original Java method code is inlined, so it is very difficult to relate specific instructions to their originating Java method, never mind a specific line of code in a Java source file. It&amp;#8217;s at least as hard to debug as a C or C++ program compiled at the highest optimization level and without any symbol information.&lt;/p&gt; &lt;p&gt;Of course, a C/C++ compiler solves this problem by embedding debuginfo into the binary. This information tells the debugger precisely how to interpret the generated code and relate it back to the original sources. So, I recently took it upon myself to remedy the GraalVM native image problem by adding DWARF debug information to Linux images. This is enough to enable effective source-level debugging using the standard Linux debugger, gdb. A comparable solution for debugging Windows binaries is under development.&lt;/p&gt; &lt;p&gt;The debugger now knows about the Java classes and methods that have been compiled into an image. Breakpoints can be placed at method entry or on specific lines in a method. The debugger can correlate machine instructions in the native image with specific source lines in Java files. It can stop and step through method code line by line and show the call stack. The debugger even knows whether instructions belong to inlined methods, and will switch back and forth between source lines in the outer compiled method and the inlined source code as you step through the code.&lt;/p&gt; &lt;p&gt;This debug capability has now arrived in the &lt;a href="https://www.graalvm.org/docs/release-notes/20_1/"&gt;latest GraalVM release&lt;/a&gt;. I recently uploaded a &lt;a target="_blank" rel="nofollow" href="https://www.youtube.com/watch?v=JqV-NFWupLA"&gt;video presentation&lt;/a&gt; to the &lt;a target="_blank" rel="nofollow" href="https://www.youtube.com/channel/UCaW8QG_QoIk_FnjLgr5eOqg/videos"&gt;Quarkus channel&lt;/a&gt; explaining what has been implemented more precisely. It includes a demonstration based on a small Java program showing how you would build a native image containing debug info and run/debug it in gdb. I hope you enjoy the demo and would welcome feedback on usability or any errors encountered when debugging.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fdebugging-graalvm-native-images-using-gdb%2F&amp;#38;linkname=Debugging%20GraalVM-native%20images%20using%20gdb" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fdebugging-graalvm-native-images-using-gdb%2F&amp;#38;linkname=Debugging%20GraalVM-native%20images%20using%20gdb" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fdebugging-graalvm-native-images-using-gdb%2F&amp;#38;linkname=Debugging%20GraalVM-native%20images%20using%20gdb" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fdebugging-graalvm-native-images-using-gdb%2F&amp;#38;linkname=Debugging%20GraalVM-native%20images%20using%20gdb" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fdebugging-graalvm-native-images-using-gdb%2F&amp;#38;linkname=Debugging%20GraalVM-native%20images%20using%20gdb" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fdebugging-graalvm-native-images-using-gdb%2F&amp;#38;linkname=Debugging%20GraalVM-native%20images%20using%20gdb" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fdebugging-graalvm-native-images-using-gdb%2F&amp;#38;linkname=Debugging%20GraalVM-native%20images%20using%20gdb" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fdebugging-graalvm-native-images-using-gdb%2F&amp;#038;title=Debugging%20GraalVM-native%20images%20using%20gdb" data-a2a-url="https://developers.redhat.com/blog/2020/06/25/debugging-graalvm-native-images-using-gdb/" data-a2a-title="Debugging GraalVM-native images using gdb"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/25/debugging-graalvm-native-images-using-gdb/"&gt;Debugging GraalVM-native images using gdb&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/C4Sx6Di6PQo" height="1" width="1" alt=""/&gt;</content><summary>The GraalVM project includes, amongst other capabilities, a component called GraalVM Native Image. GraalVM Native Image supports the delivery of Java applications as shrink-wrapped, self-contained, standalone executables, commonly referred to as Java-native images. Native images often have a smaller footprint and faster startup time compared to running the same application in the traditional way o...</summary><dc:creator>Andrew Dinn</dc:creator><dc:date>2020-06-25T07:00:20Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/25/debugging-graalvm-native-images-using-gdb/</feedburner:origLink></entry><entry><title>Red Hat Enterprise Linux 8.2 brings faster Python 3.8 run speeds</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/uPgolnsyK8A/" /><category term="C" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="performance" scheme="searchisko:content:tags" /><category term="Python" scheme="searchisko:content:tags" /><category term="python 3.8" scheme="searchisko:content:tags" /><category term="python C API" scheme="searchisko:content:tags" /><category term="python optimization" scheme="searchisko:content:tags" /><category term="python performance" scheme="searchisko:content:tags" /><category term="rhel 8.2" scheme="searchisko:content:tags" /><author><name>Tomas Orsava</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_enterprise_linux_8_2_brings_faster_python_3_8_run_speeds</id><updated>2020-06-25T07:00:18Z</updated><published>2020-06-25T07:00:18Z</published><content type="html">&lt;p&gt;The &lt;a href="https://developers.redhat.com/blog/category/python/"&gt;Python&lt;/a&gt; interpreter shipped with &lt;a href="https://developers.redhat.com/rhel8/"&gt;Red Hat Enterprise Linux (RHEL) 8&lt;/a&gt; is version 3.6, which was released in 2016. While Red Hat is committed to supporting the Python 3.6 interpreter for the lifetime of Red Hat Enterprise Linux 8, it is becoming a bit old for some use cases.&lt;/p&gt; &lt;p&gt;For developers who need the new Python features—and who can live with the inevitable compatibility-breaking changes—&lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/whats-new-red-hat-enterprise-linux-82"&gt;Red Hat Enterprise Linux 8.2&lt;/a&gt; also includes Python 3.8. Besides providing new features, packaging Python 3.8 with RHEL 8.2 allows us to release &lt;a href="https://developers.redhat.com/blog/category/performance/"&gt;performance&lt;/a&gt; and packaging improvements more quickly than we could in the rock-solid &lt;code&gt;python3&lt;/code&gt; module.&lt;/p&gt; &lt;p&gt;This article focuses on one specific performance improvement in the &lt;code&gt;python38&lt;/code&gt; package. As we&amp;#8217;ll explain, Python 3.8 is built with the GNU Compiler Collection (GCC)&amp;#8217;s &lt;code&gt;-fno-semantic-interposition&lt;/code&gt; flag. Enabling this flag disables semantic interposition, which can increase run speed by as much as 30%.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The &lt;code&gt;python38&lt;/code&gt; package joins other Python interpreters shipped in RHEL 8.2, including the &lt;code&gt;python2&lt;/code&gt; and &lt;code&gt;python3&lt;/code&gt; packages (which we described in a previous article, &lt;a href="https://developers.redhat.com/blog/2018/11/14/python-in-rhel-8/"&gt;Python in RHEL 8&lt;/a&gt;). You can install Python 3.8 alongside the other Python interpreters so that it won&amp;#8217;t interfere with the existing Python stack.&lt;/p&gt; &lt;h2&gt;Where have I seen this before?&lt;/h2&gt; &lt;p&gt;Writing this article feels like taking credit for others&amp;#8217; achievements. So, let us set this straight: The performance improvements we&amp;#8217;re discussing &lt;em&gt;are&lt;/em&gt; others&amp;#8217; achievements. As RHEL packagers, our role is similar to that of a gallery curator, rather than a painter: It is not our job to create features, but to seek out the best ones from the upstream Python project and combine them into a pleasing experience for developers after they&amp;#8217;ve gone through review, integration, and testing in Fedora.&lt;/p&gt; &lt;p&gt;Note that we do have &amp;#8220;painter&amp;#8221; roles on the team. But just as fresh paint does not belong in an exhibition hall, original contributions go to the broader community first and only appear in RHEL when they&amp;#8217;re well-tested (that is, somewhat boring and obvious).&lt;/p&gt; &lt;p&gt;The discussions leading to the change we describe in this article include an initial naïve proposal by Red Hat&amp;#8217;s Python maintainers, a critique, a better idea by C expert Jan Kratochvil, and refining that idea. All of this back-and-forth happened openly on the &lt;a target="_blank" rel="nofollow" href="https://lists.fedoraproject.org/archives/list/devel@lists.fedoraproject.org/thread/NWPVQSKVWDKA75PDEIJNJIFL5C5SJXB2/"&gt;Fedora development mailing list&lt;/a&gt;, with input from both Red Hatters and the wider community.&lt;/p&gt; &lt;h2&gt;Disabling semantic interposition in Python 3.8&lt;/h2&gt; &lt;p&gt;As we&amp;#8217;ve mentioned, the most significant performance improvement in our RHEL 8.2 &lt;code&gt;python38&lt;/code&gt; package comes from building with GCC&amp;#8217;s &lt;code&gt;-fno-semantic-interposition&lt;/code&gt; flag enabled. It increases run speed by as much as 30%, with little change to the semantics.&lt;/p&gt; &lt;p&gt;How is that possible? There are a few layers to it, so let us explain.&lt;/p&gt; &lt;h3&gt;Python&amp;#8217;s C API&lt;/h3&gt; &lt;p&gt;All of Python&amp;#8217;s functionality is exposed in its extensive &lt;a target="_blank" rel="nofollow" href="https://docs.python.org/3.8/c-api/index.html"&gt;C API&lt;/a&gt;. A large part of Python&amp;#8217;s success comes from the C API, which makes it possible to &lt;em&gt;extend&lt;/em&gt; and &lt;em&gt;embed&lt;/em&gt; Python. &lt;em&gt;Extensions&lt;/em&gt; are modules written in a language like C, which can provide functionality to Python programs. A classic example is &lt;a target="_blank" rel="nofollow" href="https://numpy.org"&gt;NumPy&lt;/a&gt;, a library written in languages like C and Fortran that manipulates Python objects. &lt;em&gt;Embedding&lt;/em&gt; means using Python from within a larger application. Applications like &lt;a target="_blank" rel="nofollow" href="https://docs.blender.org/api/current/info_overview.html"&gt;Blender&lt;/a&gt; or GIMP embed Python to allow scripting.&lt;/p&gt; &lt;p&gt;Python (or more correctly, &lt;a target="_blank" rel="nofollow" href="https://github.com/python/cpython"&gt;CPython&lt;/a&gt;, the reference implementation of the Python language) uses the C API internally: Every attribute access goes through a call to the &lt;a target="_blank" rel="nofollow" href="https://github.com/python/cpython/blob/v3.8.3/Objects/object.c#L837"&gt;&lt;code&gt;PyObject_GetAttr&lt;/code&gt; function&lt;/a&gt;, every addition is a call to &lt;a target="_blank" rel="nofollow" href="https://github.com/python/cpython/blob/v3.8.3/Objects/abstract.c#L956"&gt;&lt;code&gt;PyNumber_Add&lt;/code&gt;&lt;/a&gt;, and so on.&lt;/p&gt; &lt;h3&gt;Python&amp;#8217;s dynamic library&lt;/h3&gt; &lt;p&gt;Python can be built in two modes: &lt;i&gt;static&lt;/i&gt;, where all code lives in the Python executable, or &lt;i&gt;shared&lt;/i&gt;, where the Python executable is linked to its dynamic library called &lt;code&gt;libpython&lt;/code&gt;. In Red Hat Enterprise Linux, Python is built in shared mode, because applications that embed Python, like Blender, use the Python C API of &lt;code&gt;libpython&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;python3.8&lt;/code&gt; command is a minimalist example of embedding: It only calls the &lt;code&gt;Py_BytesMain()&lt;/code&gt; function:&lt;/p&gt; &lt;pre&gt;int main(int argc, char **argv) { return Py_BytesMain(argc, argv); } &lt;/pre&gt; &lt;p&gt;All the code lives in &lt;code&gt;libpython&lt;/code&gt;. For example, on RHEL 8.2, the size of &lt;code&gt;/usr/bin/python3.8&lt;/code&gt; is just around 8 KiB, whereas the size of the &lt;code&gt;/usr/lib64/libpython3.8.so.1.0&lt;/code&gt; library is around 3.6 MiB.&lt;/p&gt; &lt;h3&gt;Semantic interposition&lt;/h3&gt; &lt;p&gt;When executing a program, the dynamic loader allows you to override any symbol (such as a function) of the dynamic libraries that will be used in the program. You implement the override by setting the &lt;code&gt;LD_PRELOAD&lt;/code&gt; environment variable. This technique is called &lt;i&gt;ELF symbol interposition&lt;/i&gt;, and it&amp;#8217;s enabled by default in GCC.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: In Clang, semantic interposition is disabled by default.&lt;/p&gt; &lt;p&gt;This feature is commonly used, among other things, to trace memory allocation (by overriding the libc &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; functions) or to change a single application&amp;#8217;s clocks (by overriding the libc &lt;code&gt;time&lt;/code&gt; function). Semantic interposition is implemented using a procedure linkage table (PLT). Any function that can be overridden with &lt;code&gt;LD_PRELOAD&lt;/code&gt; is looked up in a table before it is called.&lt;/p&gt; &lt;p&gt;Python calls &lt;code&gt;libpython&lt;/code&gt; functions from other &lt;code&gt;libpython&lt;/code&gt; functions. To respect semantic interposition, all of these calls must be looked up in the PLT. While this activity does introduce some overhead, the slowdown is negligible compared to the time spent in the called functions.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Python uses the &lt;a target="_blank" rel="nofollow" href="https://docs.python.org/dev/library/tracemalloc.html"&gt;&lt;code&gt;tracemalloc&lt;/code&gt; module&lt;/a&gt; to trace memory allocations.&lt;/p&gt; &lt;h3&gt;LTO and function inlining&lt;/h3&gt; &lt;p&gt;In recent years, GCC has enhanced link-time optimization (LTO) to produce even more efficient code. One common optimization is to &lt;i&gt;inline&lt;/i&gt; function calls, which means replacing a function call with a copy of the function&amp;#8217;s code. Once a function call is inlined, the compiler can go even further in terms of optimizations.&lt;/p&gt; &lt;p&gt;However, it is not possible to inline functions that are looked up in the PLT. If the function can be swapped out entirely using &lt;code&gt;LD_PRELOAD&lt;/code&gt;, the compiler cannot apply assumptions and optimizations based on what that function does.&lt;/p&gt; &lt;p&gt;GCC 5.3 introduced the &lt;code&gt;-fno-semantic-interposition&lt;/code&gt; flag, which disables semantic interposition. With this flag, functions in &lt;code&gt;libpython&lt;/code&gt; that call other &lt;code&gt;libpython&lt;/code&gt; functions don&amp;#8217;t have to go through the PLT indirection anymore. As a result, they can be inlined and optimized with LTO.&lt;/p&gt; &lt;p&gt;So, that&amp;#8217;s what we did. We enabled the &lt;code&gt;-fno-semantic-interposition&lt;/code&gt; flag in Python 3.8.&lt;/p&gt; &lt;h2&gt;Drawbacks of &lt;code&gt;-fno-semantic-interposition&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;The main drawback of building Python with &lt;code&gt;-fno-semantic-interposition&lt;/code&gt; enabled is that we can no longer override &lt;code&gt;libpython&lt;/code&gt; functions using &lt;code&gt;LD_PRELOAD&lt;/code&gt;. However, the impact is limited to &lt;code&gt;libpython&lt;/code&gt;. It is still possible, for example, to override &lt;code&gt;malloc/free&lt;/code&gt; from &lt;code&gt;libc&lt;/code&gt; to trace memory allocations.&lt;/p&gt; &lt;p&gt;However, this is still an incompatibility: We do not know if developers are using &lt;code&gt;LD_PRELOAD&lt;/code&gt; with Python on RHEL 8 in a way that would break with &lt;code&gt;-fno-semantic-interposition&lt;/code&gt;. That is why we only enabled the change in the new Python 3.8, while Python 3.6—the default &lt;code&gt;python3&lt;/code&gt;—continues to work as before.&lt;/p&gt; &lt;h2&gt;Performance comparison&lt;/h2&gt; &lt;p&gt;To see the &lt;code&gt;-fno-semantic-interposition&lt;/code&gt; optimization in practice, let&amp;#8217;s take a look at the &lt;code&gt;_Py_CheckFunctionResult()&lt;/code&gt; function. This function is used by Python to check whether a C function either returned a result (is not &lt;code&gt;NULL&lt;/code&gt;) or raised an exception.&lt;/p&gt; &lt;p&gt;Here is the simplified C code:&lt;/p&gt; &lt;pre&gt;PyObject* PyErr_Occurred(void) { PyThreadState *tstate = _PyRuntime.gilstate.tstate_current; return tstate-&amp;#62;curexc_type; } PyObject* _Py_CheckFunctionResult(PyObject *callable, PyObject *result, const char *where) { int err_occurred = (PyErr_Occurred() != NULL); ... } &lt;/pre&gt; &lt;h4&gt;Assembly code with semantic interposition enabled&lt;/h4&gt; &lt;p&gt;Let&amp;#8217;s first take a look at Python 3.6 in Red Hat Enterprise Linux 7, which has not been built with &lt;code&gt;-fno-semantic-interposition&lt;/code&gt;. Here is an extract of the assembly code (read by&amp;#8217;s &lt;code&gt;disassemble&lt;/code&gt; command):&lt;/p&gt; &lt;pre&gt;Dump of assembler code for function _Py_CheckFunctionResult: (...) callq 0x7ffff7913d50 &amp;#60;PyErr_Occurred@plt&amp;#62; (...) &lt;/pre&gt; &lt;p&gt;As you can see, &lt;code&gt;_Py_CheckFunctionResult()&lt;/code&gt; calls &lt;code&gt;PyErr_Occurred()&lt;/code&gt;, and the call has to go through a PLT indirection.&lt;/p&gt; &lt;h4&gt;Assembly code with semantic interposition disabled&lt;/h4&gt; &lt;p&gt;Now let&amp;#8217;s look at an extract of the same assembly code after disabling semantic interposition:&lt;/p&gt; &lt;pre&gt;Dump of assembler code for function _Py_CheckFunctionResult: (...) mov 0x40f7fe(%rip),%rcx # rcx = &amp;#38;_PyRuntime mov 0x558(%rcx),%rsi # rsi = tstate = _PyRuntime.gilstate.tstate_current (...) mov 0x58(%rsi),%rdi # rdi = tstate-&amp;#62;curexc_type (...) &lt;/pre&gt; &lt;p&gt;In this case, GCC inlined the &lt;code&gt;PyErr_Occurred()&lt;/code&gt; function call. As a result &lt;code&gt;_Py_CheckFunctionResult()&lt;/code&gt; gets the &lt;code&gt;tstate&lt;/code&gt; directly from &lt;code&gt;_PyRuntime&lt;/code&gt;, and then it directly reads its member &lt;code&gt;tstate-&amp;#62;curexc_type&lt;/code&gt;. There is no function call and no PLT indirection, which results in faster performance.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: In more complex situations, the GCC compiler is free to optimize the inlined function even more, according to the context in which it is called.&lt;/p&gt; &lt;h2&gt;Try it for yourself!&lt;/h2&gt; &lt;p&gt;In this article, we focused on one specific improvement on the performance side, leaving new features to the upstream documents &lt;a target="_blank" rel="nofollow" href="https://docs.python.org/3.8/whatsnew/3.7.html"&gt;What&amp;#8217;s new In Python 3.7&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://docs.python.org/3.8/whatsnew/3.8.html"&gt;What&amp;#8217;s new In Python 3.8&lt;/a&gt;. If you are intrigued by the new compiler performance possibilities in Python 3.8, grab the &lt;code&gt;python38&lt;/code&gt; package from the Red Hat Enterprise Linux 8 repository and try it out. We hope you will enjoy the run speed-up, as well as a host of other new features that you will discover for yourself.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fred-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.2%20brings%20faster%20Python%203.8%20run%20speeds" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fred-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.2%20brings%20faster%20Python%203.8%20run%20speeds" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fred-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.2%20brings%20faster%20Python%203.8%20run%20speeds" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fred-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.2%20brings%20faster%20Python%203.8%20run%20speeds" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fred-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.2%20brings%20faster%20Python%203.8%20run%20speeds" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fred-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.2%20brings%20faster%20Python%203.8%20run%20speeds" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fred-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.2%20brings%20faster%20Python%203.8%20run%20speeds" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F25%2Fred-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds%2F&amp;#038;title=Red%20Hat%20Enterprise%20Linux%208.2%20brings%20faster%20Python%203.8%20run%20speeds" data-a2a-url="https://developers.redhat.com/blog/2020/06/25/red-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds/" data-a2a-title="Red Hat Enterprise Linux 8.2 brings faster Python 3.8 run speeds"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/25/red-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds/"&gt;Red Hat Enterprise Linux 8.2 brings faster Python 3.8 run speeds&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/uPgolnsyK8A" height="1" width="1" alt=""/&gt;</content><summary>The Python interpreter shipped with Red Hat Enterprise Linux (RHEL) 8 is version 3.6, which was released in 2016. While Red Hat is committed to supporting the Python 3.6 interpreter for the lifetime of Red Hat Enterprise Linux 8, it is becoming a bit old for some use cases. For developers who need the new Python features—and who can live with the inevitable compatibility-breaking changes—Red Hat E...</summary><dc:creator>Tomas Orsava</dc:creator><dc:date>2020-06-25T07:00:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/25/red-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds/</feedburner:origLink></entry><entry><title>Cloud-native development - Advanced deployment blueprint</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ddGfnyNxSKk/cloud-native-development-advanced-deployment-blueprint.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-cloud_native_development_advanced_deployment_blueprint</id><updated>2020-06-24T05:00:07Z</updated><published>2020-06-24T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s1600/cloud-native-development-ld.png" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s320/cloud-native-development-ld.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="font-size: 12.8px; text-align: center;"&gt;Part 6 - Advanced deployment blueprint&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The previous articles were &lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;introducing the foundations&lt;/a&gt; of a blueprint&amp;nbsp;for cloud-native development, &lt;a href="https://www.schabell.org/2020/05/cloud-native-development-common-architectural-elements.html" target="_blank"&gt;exploring a logical diagram&lt;/a&gt;, and diving into the first use cases with&amp;nbsp;cloud-native &lt;a href="https://www.schabell.org/2020/06/cloud-native-development-on-local-containers.html" target="_blank"&gt;development on local&lt;/a&gt;,&amp;nbsp;&lt;a href="https://www.schabell.org/2020/06/cloud-native-development-on-remote-containers.html" target="_blank"&gt;remote containers&lt;/a&gt;, and a look at &lt;a href="https://www.schabell.org/2020/06/cloud-native-development-a-deployment-blueprint.html" target="_blank"&gt;a deployment blueprint&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This article completes the series with a look at the advanced cloud-native deployment blueprint. A description providing you with guidance for aligning this blueprint to your organizational architecture follows.&lt;br /&gt;&lt;br /&gt;These details should help you understand both what the elements contain and how they might align and how their functionalities are grouped. Let's look at the use case where developers are leveraging a remote container platform for their cloud-native development environments and see how that's mapping to a productive working architecture for deploying their solutions.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;We'll be exploring this blueprint for advanced deployments from a developers local machines to development, testing, and finally production environments. It's a deeper look into how the enterprise image registries are structured to ensure secure, certified, and trustworthy images for your production environment.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Deployments&lt;/h3&gt;This example starts with a cloud-native developer working on their local machines, shown here simplified as workstation tooling. Pushing their code solutions [1], using their container tooling to initiate a build in their continuous integration and development workflow (CI/CD).&lt;br /&gt;&lt;br /&gt;(*Note: all numbered steps found in the below image are presented in the text as [#], so step one with label one is shown as [1] in the deployment storyline as it appears.)&lt;br /&gt;&lt;br /&gt;In this blueprint, the tooling is focused on working with the OpenShift Container Platform so you see an&amp;nbsp;&lt;i&gt;OpenShift client&lt;/i&gt;&amp;nbsp;is used to trigger an initial build in our CI/CD OpenShift platform. This occurs when the developer is satisfied with their code. Triggering a build and testing request to the CI/CD platform shown here as being hosted on an OpenShift Container Platform cluster:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;using git hooks, triggering a code push when it's committed to the local code repository&lt;/li&gt;&lt;li&gt;using Maven plugins, triggering a push to the development infrastructure when activated&lt;/li&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;&lt;li&gt;using&amp;nbsp;&lt;i&gt;oc client&lt;/i&gt;&amp;nbsp;container tooling (featured in the diagram)&lt;/li&gt;&lt;/ul&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; text-align: right;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Sx_pW_AMoVw/Xui7R68WCoI/AAAAAAAAxPY/z2Ol0FW4KWQWF79vJ5D8whIeAGazLeQOACNcBGAsYHQ/s1600/cloud-native-development-deployment-enterprise-registry-sd.png" imageanchor="1" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="cloud-native development" border="0" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-Sx_pW_AMoVw/Xui7R68WCoI/AAAAAAAAxPY/z2Ol0FW4KWQWF79vJ5D8whIeAGazLeQOACNcBGAsYHQ/s320/cloud-native-development-deployment-enterprise-registry-sd.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Deployment blueprint with numbered labels.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Development teams are free to use the method that best suits their own needs when pushing their code to&amp;nbsp; their CI/CD platform.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;CI/CD infrastructure&lt;/h3&gt;The pushed code from the developers local working environment is picked up by the CI/CD platform, in this case most often was a Jenkins-based platform. The CI/CD platform can, for example, use a source-to-image workflow to build the container image, test the image, and place it [2] in the transient image registry. At this point it has been tagged as &lt;i&gt;appImage:dev&lt;/i&gt;&amp;nbsp;and is pushed to the OpenShift cluster hosting the enterprise image registries managed with Quay.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Enterprise registries&lt;/h3&gt;For an advanced deployment we'll be looking at how to make sure we have a playground or sandbox registry for development and testing of untrusted container images. Our &lt;i&gt;appImage:dev&lt;/i&gt;&amp;nbsp;image has been pushed to the &lt;i&gt;sandbox registry&lt;/i&gt;&amp;nbsp;[3] where we find any imported third-party images, external images, and other images [4] that have yet to be tested against in-house security and certification requirements.&lt;br /&gt;&lt;br /&gt;All eventual &lt;i&gt;dev&lt;/i&gt;&amp;nbsp;tagged images, such as our &lt;i&gt;appImage:dev&lt;/i&gt; container image is pushed out to the development infrastructure for further testing. As container images are certified, found to meet security requirements, and pass further in-house testing requirements, they're moved to the second &lt;i&gt;enterprise registry&lt;/i&gt;. At this point they are considered &lt;i&gt;trusted images&lt;/i&gt;&amp;nbsp;and can be further pushed in this blueprint to testing and production infrastructure as describe in more detail below.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Development infrastructure&lt;/h3&gt;The development infrastructure image registry is loaded with a copy of the&amp;nbsp;&lt;i&gt;appImage:dev&lt;/i&gt;&amp;nbsp;tagged container image [5], which then deploys [6] the &lt;i&gt;application&lt;/i&gt;&amp;nbsp;and m&lt;i&gt;icroservices&lt;/i&gt;&amp;nbsp;associated with our workload. The development infrastructure is contained in it's own OpenShift cluster for further testing and validation of the developed application and microservices.&lt;br /&gt;&lt;br /&gt;Once the development testing has been satisfied along with any other certification and security requirements, the&amp;nbsp;&lt;i&gt;appImage&lt;/i&gt;&amp;nbsp;is tagged as&amp;nbsp;&lt;i&gt;appImage:test&lt;/i&gt;&amp;nbsp;and pushed from the &lt;i&gt;sandbox registry&lt;/i&gt;&amp;nbsp;to the&amp;nbsp;&lt;i&gt;enterprise registry&lt;/i&gt; [7].&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Test infrastructure&lt;/h3&gt;All images tagged as &lt;i&gt;test&lt;/i&gt; are pushed from the Quay enterprise image registry to the test infrastructure [8] into the test OpenShift cluster image registry. The&amp;nbsp;&lt;i&gt;appImage:test&lt;/i&gt;&amp;nbsp;is used for deploying [9] the containers with the&amp;nbsp;&lt;i&gt;application&lt;/i&gt;&amp;nbsp;and&amp;nbsp;&lt;i&gt;microservices&lt;/i&gt;&amp;nbsp;as needed. At this point the testing cycle starts again with new test infrastructure data and requirements on the road to a production deployment.&lt;br /&gt;&lt;br /&gt;Once the testing has been satisfied, the &lt;i&gt;appImage&lt;/i&gt;&amp;nbsp;is tagged as &lt;i&gt;appImage:prod&lt;/i&gt;&amp;nbsp;and updated in the &lt;i&gt;enterprise registry&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Production infrastructure&lt;/h3&gt;All images tagged as &lt;i&gt;prod&lt;/i&gt; are pushed from the Quay enterprise image registry to the production infrastructure [10] into the production OpenShift cluster image registry. The&amp;nbsp;&lt;i&gt;appImage:prod&lt;/i&gt;&amp;nbsp;is used for deploying [11] the containers with the&amp;nbsp;&lt;i&gt;application&lt;/i&gt;&amp;nbsp;and&amp;nbsp;&lt;i&gt;microservices&lt;/i&gt;&amp;nbsp;as needed. At this point the workload is live for use in the production environment.&lt;br /&gt;&lt;br /&gt;This use case example features the advanced deployment architecture for your workloads using cloud-native development in your organization. It's featuring a blueprint for mapping your cloud-native development process for deploying the developer solution through to your production infrastructure.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Exploring the diagrams&lt;/h3&gt;As mentioned in the introduction to this series, we've pulled together an&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;examples repository&lt;/a&gt;&amp;nbsp;for all our architecture blueprint diagrams. The&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;Portfolio Architecture Examples&lt;/a&gt;&amp;nbsp;repository makes it possible to collect and share individual images from each diagram element as well as the entire project as a whole.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-dRBXuaZt5t0/XsuO-04T-9I/AAAAAAAAxK4/lXES7oKvrwEJjgtKcvJyJqwK3v0Ey65lgCNcBGAsYHQ/s1600/Screenshot%2B2020-05-25%2Bat%2B11.24.53.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="303" data-original-width="1219" height="98" src="https://1.bp.blogspot.com/-dRBXuaZt5t0/XsuO-04T-9I/AAAAAAAAxK4/lXES7oKvrwEJjgtKcvJyJqwK3v0Ey65lgCNcBGAsYHQ/s400/Screenshot%2B2020-05-25%2Bat%2B11.24.53.png" title="" width="400" /&gt;&lt;/a&gt;&lt;br /&gt;To access the diagram covered in this article, you scroll down to the file listings on the main page, you can locate a schematic diagram as shown in the figure here.&lt;br /&gt;&lt;br /&gt;This is the collection for the schematic diagrams associated with cloud-native development:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in this case it's a single image you can click to view&lt;/li&gt;&lt;li&gt;a project file you can download to your local machine using the&amp;nbsp;&lt;i&gt;Download Diagram&lt;/i&gt;&amp;nbsp;link&lt;/li&gt;&lt;li&gt;a&amp;nbsp;&lt;i&gt;Load Diagram&lt;/i&gt;&amp;nbsp;link that you can click to automatically open the project diagrams in the diagram tooling used in this blueprint&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Give it a try and feel free to explore the collection of logical, schematic, detailed, solution, and community diagrams. This should allow you to get started much quicker than from scratch if you can kick-start a project with existing diagrams.&lt;br /&gt;&lt;br /&gt;Should you design your own diagrams, please contribute the project file (ending in .drawio) by raising an issue with the file attached. We'd love to continue collecting these projects for others to use.&lt;br /&gt;&lt;br /&gt;Finally, there is a free online &lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-workshops" target="_blank"&gt;beginners guide workshop&lt;/a&gt; available focused on using the diagram tooling, please explore to learn tips and tricks from the experts.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;What's next&lt;/h3&gt;An overview of the series on the cloud-native development portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;A blueprint&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-common-architectural-elements.html" target="_blank"&gt;Common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/06/cloud-native-development-on-local-containers.html" target="_blank"&gt;Cloud-native development on local containers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/06/cloud-native-development-on-remote-containers.html" target="_blank"&gt;Cloud-native development on remote containers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/06/cloud-native-development-a-deployment-blueprint.html" target="_blank"&gt;A deployment blueprint&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Advanced deployment blueprint&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above. This wraps up the entire series on cloud-native development, so thanks for your time and feel free to provide any feedback in the comments.&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=_IEN8_YSfr8:npK8m00qFM4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=_IEN8_YSfr8:npK8m00qFM4:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=_IEN8_YSfr8:npK8m00qFM4:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=_IEN8_YSfr8:npK8m00qFM4:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=_IEN8_YSfr8:npK8m00qFM4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=_IEN8_YSfr8:npK8m00qFM4:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=_IEN8_YSfr8:npK8m00qFM4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=_IEN8_YSfr8:npK8m00qFM4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=_IEN8_YSfr8:npK8m00qFM4:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=_IEN8_YSfr8:npK8m00qFM4:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=_IEN8_YSfr8:npK8m00qFM4:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/_IEN8_YSfr8" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ddGfnyNxSKk" height="1" width="1" alt=""/&gt;</content><summary>Part 6 - Advanced deployment blueprintThe previous articles were introducing the foundations of a blueprint for cloud-native development, exploring a logical diagram, and diving into the first use cases with cloud-native development on local, remote containers, and a look at a deployment blueprint. This article completes the series with a look at the advanced cloud-native deployment blueprint. A d...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-06-24T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/_IEN8_YSfr8/cloud-native-development-advanced-deployment-blueprint.html</feedburner:origLink></entry><entry><title>JBoss Tools 4.16.0.AM1 for Eclipse 2020-06</title><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YtAZv5D52PI/4.16.0.am1.html" /><category term="release" /><category term="jbosstools" /><category term="devstudio" /><category term="jbosscentral" /><author><name>jeffmaury</name></author><id>https://tools.jboss.org/blog/4.16.0.am1.html</id><updated>2020-06-26T10:30:14Z</updated><published>2020-06-24T00:00:00Z</published><content type="html">&lt;div&gt;&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Happy to announce 4.16.0.AM1 (Developer Milestone 1) build for Eclipse 2020-06.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Downloads available at &lt;a href="https://tools.jboss.org/downloads/jbosstools/2020-06/4.16.0.AM1.html"&gt;JBoss Tools 4.16.0 AM1&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-new"&gt;&lt;a class="anchor" href="#what-is-new"&gt;&lt;/a&gt;What is New?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Full info is at &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.16.0.AM1.html"&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="openshift"&gt;&lt;a class="anchor" href="#openshift"&gt;&lt;/a&gt;OpenShift&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="secure-url-support"&gt;&lt;a class="anchor" href="#secure-url-support"&gt;&lt;/a&gt;Secure URL support&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It is now possible to create secured URLs in the Application Explorer View. If you select this option, the created URL will be accessible through &lt;code&gt;https&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/openshift/images/secure-url.png" alt="secure url" width="600" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When such an URL is displayed in the tree, the icon now has a secure lock indicator.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/openshift/images/secure-url1.png" alt="secure url1" width="600" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="hibernate-tools"&gt;&lt;a class="anchor" href="#hibernate-tools"&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="hibernate-runtime-provider-updates"&gt;&lt;a class="anchor" href="#hibernate-runtime-provider-updates"&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A number of additions and updates have been performed on the available Hibernate runtime providers.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="runtime-provider-updates"&gt;&lt;a class="anchor" href="#runtime-provider-updates"&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 5.4 runtime provider now incorporates Hibernate Core version 5.4.17.Final and Hibernate Tools version 5.4.14.Final.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 5.3 runtime provider now incorporates Hibernate Core version 5.3.17.Final and Hibernate Tools version 5.3.16.Final.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="server-tools"&gt;&lt;a class="anchor" href="#server-tools"&gt;&lt;/a&gt;Server Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="wildfly-20-server-adapter"&gt;&lt;a class="anchor" href="#wildfly-20-server-adapter"&gt;&lt;/a&gt;Wildfly 20 Server Adapter&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A server adapter has been added to work with Wildfly 20. It adds support for Java EE 8, Jakarta EE 8 and Microprofile 3.3.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Jeff Maury&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YtAZv5D52PI" height="1" width="1" alt=""/&gt;</content><summary>Happy to announce 4.16.0.AM1 (Developer Milestone 1) build for Eclipse 2020-06. Downloads available at JBoss Tools 4.16.0 AM1. What is New? Full info is at this page. Some highlights are below. OpenShift Secure URL support It is now possible to create secured URLs in the Application Explorer View. If you select this option, the created URL will be accessible through https. When such an URL is displayed in the tree, the icon now has a secure lock indicator. Hibernate Tools Hibernate Runtime Provider Updates A number of additions and updates have been performed on the available Hibernate runtime providers. Runtime Provider Updates The Hibernate 5.4 runtime provider now incorporates Hibernate Core version...</summary><dc:creator>jeffmaury</dc:creator><dc:date>2020-06-24T00:00:00Z</dc:date><feedburner:origLink>https://tools.jboss.org/blog/4.16.0.am1.html</feedburner:origLink></entry><entry><title>What enterprise developers need to know about security and compliance</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/z2aOFEtSgQk/" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="continuous delivery" scheme="searchisko:content:tags" /><category term="continuous security" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="DevSecOps" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="secure development" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="security compliance" scheme="searchisko:content:tags" /><author><name>Daniel Domkowski</name></author><id>searchisko:content:id:jbossorg_blog-what_enterprise_developers_need_to_know_about_security_and_compliance</id><updated>2020-06-23T07:00:22Z</updated><published>2020-06-23T07:00:22Z</published><content type="html">&lt;p&gt;One of the luxuries of my job is that I get to speak to and work with a range of IT people employed by U.S. federal and state government agencies. That range includes &lt;a href="https://developers.redhat.com/topics/devops/"&gt;DevOps&lt;/a&gt; engineers, developers, sysadmins, database administrators, and &lt;a href="https://developers.redhat.com/topics/security/"&gt;security&lt;/a&gt; professionals. Everyone I talk to, even security professionals, says that IT security and compliance can be imprecise, subjective, overwhelming, and variable—especially in the federal government.&lt;/p&gt; &lt;p&gt;The plethora of policies, laws, and standards can be intimidating in aggregate. Here is a short list:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Authorization to Operate (ATO)&lt;/li&gt; &lt;li&gt;Federal Information Security Management Act (FISMA)&lt;/li&gt; &lt;li&gt;Federal Risk and Authorization Management Program (FedRAMP)&lt;/li&gt; &lt;li&gt;Department of Defense Cloud Computing Security Requirements Guide (DoD SRG)&lt;/li&gt; &lt;li&gt;508 Compliance&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Additionally, what it means to be &lt;em&gt;secure&lt;/em&gt; or &lt;em&gt;compliant&lt;/em&gt; changes from agency to agency, and even between authorizing officers within a single agency, based on a range of factors.&lt;/p&gt; &lt;p&gt;Many developers ask how newer technologies and behaviors like infrastructure as code (IaC), &lt;a href="https://developers.redhat.com/topics/ci-cd/"&gt;continuous integration/continuous delivery (CI/CD)&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/containers/"&gt;containers&lt;/a&gt;, and a range of cloud services map to compliance frameworks and federal security laws. As a developer, you&amp;#8217;re often wondering what your security responsibility is right from the beginning of the software development lifecycle, and you might still be wondering all the way into production. Trust me when I say that you&amp;#8217;re not the only one who is wondering.&lt;/p&gt; &lt;p&gt;This article is dedicated to helping you, the developer, understand more of the standards so that less is unknown and variable. The ultimate goal is to make security more precise, establish known responsibility (and gaps in responsibility), and incorporate security into your daily workflow—even when the requirements and how they are interpreted change from project to project.&lt;/p&gt; &lt;h2&gt;Share responsibility and inherit when you can&lt;/h2&gt; &lt;p&gt;Start by establishing that it&amp;#8217;s not your job to cover it all (or, to say it another way, don&amp;#8217;t try to boil the ocean). As a developer in the enterprise, it is impossible for you to deliver secure code, configure operating system images, monitor the network, and scan filesystems. If you try to do all of that, you&amp;#8217;ll spend far less time securing the components that you are responsible for—source code, application dependencies, and testing—and you&amp;#8217;ll spread yourself too thin.&lt;/p&gt; &lt;p&gt;The number of platforms and vendors that offer reliable, reputable options for services and products has never been higher, and it is still growing. Infrastructure cloud providers supply resources like compute, network, and storage provision, while software vendors typically provide supported container images for their products.&lt;/p&gt; &lt;p&gt;The lesson here is to inherit the responsibility that these platforms and vendors assumed for securing an information system. Doing that allows you to check off a significant number of security controls during the ATO process. In the case of patches or responding to security incidents, these providers (not just you) are on the hook to deliver.&lt;/p&gt; &lt;p&gt;This doesn&amp;#8217;t mean that you should stop talking to ops and infosec, or that you can place all of the blame on them if an internal, enterprise service they&amp;#8217;ve provided fails. If anything, it means you should work with providers of all types that welcome your collaboration. Intentionally share the responsibility for managing risk. Having an established &lt;a target="_blank" rel="nofollow" href="https://www.cio.com/article/2395825/project-management-how-to-design-a-successful-raci-project-plan.html"&gt;RACI matrix&lt;/a&gt; supports clear communication and assignments of responsibility between developers, operations, and security teams. It enforces the behaviors necessary to generate a successful DevSecOps culture.&lt;/p&gt; &lt;h2&gt;Embrace the world of continuous security&lt;/h2&gt; &lt;p&gt;If you&amp;#8217;re still doubting when it&amp;#8217;s important to focus on security in the areas that you are responsible for, then do it all the time. Rather, do it continuously.&lt;/p&gt; &lt;p&gt;Authors Gene Kim, Nicole Forsgren, and Jez Humble did everyone involved in enterprise software delivery a big favor with their book, &lt;em&gt;&lt;a target="_blank" rel="nofollow" href="https://itrevolution.com/book/accelerate/"&gt;Accelerate: Building and Scaling High Performing Technology Organizations&lt;/a&gt;&lt;/em&gt;, which measures the behaviors that lead to overall organizational performance.  Using data collected from enterprises of all types, the book proves that behaviors like continuous delivery and continuous security lead to a more collaborative culture and overall improved organizational performance. As the book states:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&amp;#8220;Teams that build security into their work also do better at continuous delivery.&amp;#8221;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;In other words, your organization will reach its goals and deliver better software if you build security into your daily work. Continuously performing security activities and behaviors forces you to learn as you go. It also forces you out of bad behaviors like leaving SSH keys lying around in a repository.&lt;/p&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://dodcio.defense.gov/Portals/0/Documents/DoD%20Enterprise%20DevSecOps%20Reference%20Design%20v1.0_Public%20Release.pdf?ver=2019-09-26-115824-583"&gt;DevSecOps Reference Design&lt;/a&gt;, authored by the U.S. Department of Defense, is an excellent resource for identifying what security steps to apply during specific software development lifecycle phases to support continuous security. Among other things, the guide recommends:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;IDE security plugins that scan source code as the developer writes it.&lt;/li&gt; &lt;li&gt;Static source code tools that scan code before commits.&lt;/li&gt; &lt;li&gt;Source code repository security plugins to check for things like authorization tokens, SSH keys, and passwords.&lt;/li&gt; &lt;li&gt;Container registries with security-scanning frameworks that can identify vulnerabilities in container images.&lt;/li&gt; &lt;li&gt;Dependency checks for applications using potentially vulnerable open source libraries.&lt;/li&gt; &lt;li&gt;Dynamic and interactive tools that scan applications after they&amp;#8217;ve been built.&lt;/li&gt; &lt;li&gt;Manual penetration tests that mimic an attacker and might discover vulnerabilities not uncovered by another tool.&lt;/li&gt; &lt;li&gt;Continuous monitoring solutions that identify threats at runtime and persist event logging for analysis.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Get involved in choosing your tools&lt;/h2&gt; &lt;p&gt;Telling a developer to be picky about tools kind of goes without saying. Nevertheless, I&amp;#8217;ve had conversations with too many developers who think that information security is someone else&amp;#8217;s job. It&amp;#8217;s &lt;em&gt;everyone&amp;#8217;s&lt;/em&gt; job.&lt;/p&gt; &lt;p&gt;Because developers are responsible for security, it&amp;#8217;s important to have a choice about the security products used during the development, building, and testing phases.  In &lt;i&gt;Accelerate&lt;/i&gt;, authors Kim, Forsgren, and Humble argue that choosing the correct tool is technical work. &amp;#8220;When the tools provided actually make life easier for the engineers who use them, they will adopt them of their own free will.&amp;#8221;&lt;/p&gt; &lt;p&gt;Security will be more precise if it&amp;#8217;s surrounded by the precision of your existing work, such as the security plugins for your favorite IDEs or the scanning tools that are just another component in your CI/CD pipeline. If a tool gives you faster feedback, if it takes less time to use than remediating a vulnerability later in the delivery cycle, then you are more apt to use it. Choose the right tools to incorporate security into your daily work.&lt;/p&gt; &lt;h2&gt;Tech is evolving, but security principles don&amp;#8217;t&lt;/h2&gt; &lt;p&gt;Container orchestration, &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;serverless&lt;/a&gt; platforms, intelligent security tooling, and automated deployments might be changing how we scan for vulnerabilities or patch an application in production, but that doesn&amp;#8217;t change the fact that &lt;a target="_blank" rel="nofollow" href="https://www.schneier.com/essays/archives/2000/04/the_process_of_secur.html"&gt;security is still more about the process than the products&lt;/a&gt;, or that &lt;a target="_blank" rel="nofollow" href="https://www.csoonline.com/article/3268066/how-important-defense-in-depth-will-be-as-the-lines-between-security-layers-blur.html"&gt;defense-in-depth still reigns supreme&lt;/a&gt; for securing an information system. There is a good reason that the &lt;a target="_blank" rel="nofollow" href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf"&gt;National Institute of Standards and Technology&amp;#8217;s special publication on security controls&lt;/a&gt; includes 18 different control families or categories on security. Everything from how you encrypt sensitive information to where you put the fire extinguishers matters to information security. New technologies for cryptography and fire management are surfacing all the time.&lt;/p&gt; &lt;p&gt;If anything, the best practice is to have an open mind to new technologies that could help you address security concerns in your organization. Automated configuration management, &lt;a href="https://developers.redhat.com/openshift/"&gt;container orchestration&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://www.infosecurity-magazine.com/opinions/mmutable-infrastructure-modern/"&gt;immutable infrastructure&lt;/a&gt; all make it easier to consistently and repeatably configure information systems. IDE security plug-ins and container registry security scanning help to shift security &amp;#8220;left&amp;#8221; by enabling developers to identify vulnerabilities early rather than during a security review that occurs downstream.&lt;/p&gt; &lt;p&gt;These tools don&amp;#8217;t remove the need for standard security principles like security confirmation management and vulnerability scanning; rather, they allow you to focus your attention on where you most need to analyze and manage risk.&lt;/p&gt; &lt;h2&gt;Education is the silver bullet&lt;/h2&gt; &lt;p&gt;Just like software security and delivery, learning should be continuous. New tools help to manage security prevention and response, but attackers are also continuously innovating and learning. There are plentiful resources for delivering software securely, especially in the context of &lt;a target="_blank" rel="nofollow" href="https://www.amazon.com/Agile-Application-Security-Enabling-Continuous/dp/1491938846/ref=sr_1_1?qid=1582580009&amp;#38;refinements=p_27%3ALaura+Bell&amp;#38;s=books&amp;#38;sr=1-1&amp;#38;text=Laura+Bell"&gt;Agile&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://www.amazon.com/DevOps-Handbook-World-Class-Reliability-Organizations/dp/1942788002/ref=pd_sbs_14_t_1/130-8957903-8014362?_encoding=UTF8&amp;#38;pd_rd_i=1942788002&amp;#38;pd_rd_r=9686a1c0-4eed-447d-873d-f6ee8b9a3f2b&amp;#38;pd_rd_w=N7EZv&amp;#38;pd_rd_wg=vdLqs&amp;#38;pf_rd_p=5cfcfe89-300f-47d2-b1ad-a4e27203a02a&amp;#38;pf_rd_r=GCBG5QNC33DEPJVXBCQ7&amp;#38;psc=1&amp;#38;refRID=GCBG5QNC33DEPJVXBCQ7"&gt;DevOps&lt;/a&gt;. As a former product manager, I can&amp;#8217;t state enough the power of &lt;a target="_blank" rel="nofollow" href="https://www.amazon.com/Threat-Modeling-Designing-Adam-Shostack-ebook/dp/B00IG71FAS"&gt;threat modeling&lt;/a&gt; as an exercise for scrum teams to identify potential risks early on in the software development lifecycle.&lt;/p&gt; &lt;p&gt;I also recommend borrowing what&amp;#8217;s worked before and replicating outcomes. Read studies about how others have delivered security continuously, like the &lt;a target="_blank" rel="nofollow" href="https://youtu.be/OO4UVCp5QIg"&gt;National Geospatial-Intelligence Agency&amp;#8217;s success&lt;/a&gt; with Red Hat OpenShift. In the case of this program, applications were able to inherit ~90% of their security controls from a hardened CI/CD pipeline and container platform, which not only significantly reduced the developer&amp;#8217;s responsibility for addressing the controls within their application, but also reduced the time the time to compliance (application ATOs in a single Agile sprint!) Even better, those information security organizations that are pursuing &amp;#8220;continuous authorizations&amp;#8221; like the &lt;a target="_blank" rel="nofollow" href="https://www.fedscoop.com/fast-track-ato-air-force-wanda-jones-heath/"&gt;US Air Force&lt;/a&gt; can really complement and even accelerate their teams that are conducting continuous security in parallel (i.e., all boats rowing in the same direction).&lt;/p&gt; &lt;p&gt;Reversing the formula, I would also look at security incidents from the past, such as the &lt;a target="_blank" rel="nofollow" href="https://blogs.apache.org/foundation/entry/apache-struts-statement-on-equifax"&gt;Apache Struts statement on the Equifax security breach&lt;/a&gt; &lt;a target="_blank" rel="nofollow" href="https://youtu.be/OO4UVCp5QIg?t=876"&gt;from 2017&lt;/a&gt;. Use these past incidents to identify where users and enterprises went wrong. Examine them carefully to understand the consequences of not sharing responsibility and adopting continuous security.&lt;/p&gt; &lt;p&gt;The recommendations from the Apache statement apply to all types of software delivery, not only to projects using Struts, and certainly not only to Equifax. Everyone is building software today, including government departments and agencies of all types. For software to be delivered continuously and securely, security needs to be everyone&amp;#8217;s job. This type of behavior leads to lower costs and faster implementation times, which invariably leads to more rapid approvals for compliance and security authorization audits. Let&amp;#8217;s make it an integral part of each phase of the software development lifecycle.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F23%2Fwhat-enterprise-developers-need-to-know-about-security-and-compliance%2F&amp;#38;linkname=What%20enterprise%20developers%20need%20to%20know%20about%20security%20and%20compliance" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F23%2Fwhat-enterprise-developers-need-to-know-about-security-and-compliance%2F&amp;#38;linkname=What%20enterprise%20developers%20need%20to%20know%20about%20security%20and%20compliance" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F23%2Fwhat-enterprise-developers-need-to-know-about-security-and-compliance%2F&amp;#38;linkname=What%20enterprise%20developers%20need%20to%20know%20about%20security%20and%20compliance" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F23%2Fwhat-enterprise-developers-need-to-know-about-security-and-compliance%2F&amp;#38;linkname=What%20enterprise%20developers%20need%20to%20know%20about%20security%20and%20compliance" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F23%2Fwhat-enterprise-developers-need-to-know-about-security-and-compliance%2F&amp;#38;linkname=What%20enterprise%20developers%20need%20to%20know%20about%20security%20and%20compliance" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F23%2Fwhat-enterprise-developers-need-to-know-about-security-and-compliance%2F&amp;#38;linkname=What%20enterprise%20developers%20need%20to%20know%20about%20security%20and%20compliance" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F23%2Fwhat-enterprise-developers-need-to-know-about-security-and-compliance%2F&amp;#38;linkname=What%20enterprise%20developers%20need%20to%20know%20about%20security%20and%20compliance" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F23%2Fwhat-enterprise-developers-need-to-know-about-security-and-compliance%2F&amp;#038;title=What%20enterprise%20developers%20need%20to%20know%20about%20security%20and%20compliance" data-a2a-url="https://developers.redhat.com/blog/2020/06/23/what-enterprise-developers-need-to-know-about-security-and-compliance/" data-a2a-title="What enterprise developers need to know about security and compliance"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/23/what-enterprise-developers-need-to-know-about-security-and-compliance/"&gt;What enterprise developers need to know about security and compliance&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/z2aOFEtSgQk" height="1" width="1" alt=""/&gt;</content><summary>One of the luxuries of my job is that I get to speak to and work with a range of IT people employed by U.S. federal and state government agencies. That range includes DevOps engineers, developers, sysadmins, database administrators, and security professionals. Everyone I talk to, even security professionals, says that IT security and compliance can be imprecise, subjective, overwhelming, and varia...</summary><dc:creator>Daniel Domkowski</dc:creator><dc:date>2020-06-23T07:00:22Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/23/what-enterprise-developers-need-to-know-about-security-and-compliance/</feedburner:origLink></entry><entry><title>A development roadmap for Open Data Hub</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/I1i3t3gCfKI/" /><category term="AI as a service" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="continuous integration" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubeflow" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="machine learning" scheme="searchisko:content:tags" /><category term="Open Data Hub" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="operator" scheme="searchisko:content:tags" /><author><name>Václav Pavlín</name></author><id>searchisko:content:id:jbossorg_blog-a_development_roadmap_for_open_data_hub</id><updated>2020-06-22T07:00:14Z</updated><published>2020-06-22T07:00:14Z</published><content type="html">&lt;p&gt;Open Data Hub (ODH) is a blueprint for building an AI-as-a-Service (AIaaS) platform on Red Hat&amp;#8217;s &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;-based &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;OpenShift 4.x&lt;/a&gt;. The Open Data Hub team recently released &lt;a href="https://developers.redhat.com/blog/2020/05/07/open-data-hub-0-6-brings-component-updates-and-kubeflow-architecture/"&gt;Open Data Hub 0.6.0&lt;/a&gt;, followed up by a smaller update of &lt;a href="https://developers.redhat.com/blog/2020/06/02/open-data-hub-0-6-1-bug-fix-release-to-smooth-out-redesign-regressions/"&gt;Open Data Hub 0.6.1&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;We recently got together and discussed our plans and timeline for the next two releases. Our plans are based on the &lt;a target="_blank" rel="nofollow" href="https://gitlab.com/opendatahub/opendatahub-community/-/wikis/uploads/39b75e0eee79a059fffabbf0f38d77cf/ODH_Roadmap__draft_.pdf"&gt;roadmap slide deck&lt;/a&gt; that we put together and presented during the &lt;a target="_blank" rel="nofollow" href="https://gitlab.com/opendatahub/opendatahub-community/-/wikis/Open-Data-Hub-Community-Meeting-Agenda#monday-april-6th-2020"&gt;Open Data Hub community meeting on April 6&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In this article, we present our roadmap for the next several Open Data Hub releases. We would like to emphasize that the target dates are optimistic, describing what we would like to achieve. With the current state of the world and vacation time coming up, these dates might change.&lt;br /&gt; &lt;span id="more-730837"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Open Data Hub 0.7: End of June 2020&lt;/h2&gt; &lt;p&gt;Our closest release is mainly about &lt;a href="https://developers.redhat.com/blog/2020/02/10/installing-kubeflow-v0-7-on-openshift-4-2/"&gt;Kubeflow&lt;/a&gt; 1.0 and making it available on &lt;a href="https://developers.redhat.com/products/openshift"&gt;Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Kubeflow 1.0 on OpenShift&lt;/h3&gt; &lt;p&gt;The primary goal of this initiative is to verify that Kubeflow 1.0 works on Red Hat OpenShift and fix the issues that we find. Another goal is to document and ideally automate some of the verification processes to start enabling &lt;a href="https://developers.redhat.com/topics/ci-cd/"&gt;continuous integration&lt;/a&gt; (CI) for Kubeflow on OpenShift.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: Because the project is quite fresh and changes frequently, we have disabled &lt;a target="_blank" rel="nofollow" href="https://www.kubeflow.org/docs/components/serving/kfserving/"&gt;KFServing&lt;/a&gt; while we work to enable &lt;a href="https://developers.redhat.com/blog/2020/02/10/installing-kubeflow-v0-7-on-openshift-4-2/"&gt;Kubeflow 0.7 on OpenShift&lt;/a&gt;. We will continue to investigate the state of KFServing and any potential issues with it as part of our work in this area.&lt;/p&gt; &lt;h3&gt;Improve Open Data Hub CI&lt;/h3&gt; &lt;p&gt;The continuous integration (CI) based on OpenShift CI is running for the &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/odh-manifests/"&gt;odh-manifests repository&lt;/a&gt;, but the test set is minimal. The goal of this initiative is to extend and improve the tests for all components. We want to be able to verify that containers have not only started but that the components actually work—meaning we plan to add some functionality testing.&lt;/p&gt; &lt;p&gt;Another aspect of this project is to enable the CI component for other Open Data Hub repositories, mainly &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/opendatahub-operator"&gt;opendatahub-operator&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Start mixing Open Data Hub and Kubeflow components&lt;/h3&gt; &lt;p&gt;Since the inception of the Open Data Hub project on top of Kubeflow, we have planned to have the ability to mix components from Open Data Hub and Kubeflow. Currently, it&amp;#8217;s possible, but there is no promise that the components will run and work well together.&lt;/p&gt; &lt;p&gt;We have found issues with running &lt;a target="_blank" rel="nofollow" href="https://github.com/kubeflow/manifests/issues/1022"&gt;Kubeflow in custom namespaces&lt;/a&gt;. Kubeflow also heavily depends on &lt;a href="https://developers.redhat.com/topics/service-mesh/"&gt;Istio&lt;/a&gt;, which is not yet the case for Open Data Hub. For this project, we will choose a Kubeflow component and start testing it when it is running as part of Open Data Hub. (The first candidate is one of the training-job operators: &lt;a target="_blank" rel="nofollow" href="https://www.kubeflow.org/docs/components/training/tftraining/"&gt;TF job&lt;/a&gt; or &lt;a target="_blank" rel="nofollow" href="https://www.kubeflow.org/docs/components/training/pytorch/"&gt;Pytorch job&lt;/a&gt;).&lt;/p&gt; &lt;h3&gt;Add Object Storage Component&lt;/h3&gt; &lt;p&gt;Open Data Hub relies on Amazon Simple Storage Service (Amazon S3)-compatible object storage. Currently, we do not have an easy way to provide that for our users, so we plan to add a component implementing S3-compatible object storage. Such component could be the &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/technologies/cloud-computing/openshift-container-storage"&gt;OpenShift Container Storage&lt;/a&gt; (OCS) or &lt;a target="_blank" rel="nofollow" href="https://rook.io/"&gt;Rook Ceph&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Because the default installation of OCS is very resource-intensive, we will work with the team to help us with a smaller (non-production) installation that can be used for development, testing, workshops, and other use cases.&lt;/p&gt; &lt;h3&gt;Convert Data Catalog to Kustomize&lt;/h3&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://opendatahub.io/news/2019-12-15/data-catalog-in-odh.html"&gt;Data Catalog&lt;/a&gt; is the last &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/odh-manifests/issues/105"&gt;component missing&lt;/a&gt; in the latest Open Data Hub versions. We would like to convert it and provide it as part of the next release.&lt;/p&gt; &lt;h2&gt;Open Data Hub 0.8: End of August 2020&lt;/h2&gt; &lt;p&gt;For the summer release, we are focusing on automation and making sure Open Data Hub and Kubeflow work well together.&lt;/p&gt; &lt;h3&gt;Continuous deployment&lt;/h3&gt; &lt;p&gt;We will keep improving CI of Open Data Hub, but the second part of the story is continuous deployment (CD). We have two targets for this initiative: The Internal Data Hub running internally at Red Hat and an Open Data Hub instance deployed in &lt;a target="_blank" rel="nofollow" href="http://massopen.cloud/"&gt;Mass Open Cloud&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The idea is to automatically deploy new versions of Open Data Hub into staging on both of these targets. Because Open Data Hub consists of at least three main parts—the operator, Open Data Hub manifests, and the Kubeflow manifests—we need to investigate what we really mean by continuous deployment on Open Dat Hub.  Our goal is to come up with a plan for what to automate and how we will do it with regard to deployment.&lt;/p&gt; &lt;h3&gt;Universal base images (UBI) for Open Data Hub&lt;/h3&gt; &lt;p&gt;Red Hat is doing great work with developing the &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image"&gt;Red Hat Universal Base Image&lt;/a&gt; (UBI), and we want to leverage that as much as possible. The goal of this initiative is to verify that all of our components are running on UBI and work with upstream communities where that is not the case.&lt;/p&gt; &lt;h3&gt;Continue mixing Open Data Hub and Kubeflow components&lt;/h3&gt; &lt;p&gt;Assuming our experiment with mixing components in Open Data Hub 0.7  goes well, we will continue to test, fix, and verify more of these components. We will complete work on our priority list of components before we start working on the next set for Open Data Hub 0.8&lt;/p&gt; &lt;h2&gt;Open Data Hub 0.9: Autumn 2020&lt;/h2&gt; &lt;p&gt;This is the farthest release we have a rough idea for at the moment. With this release, we will focus on enterprise requirements for Open Data Hub.&lt;/p&gt; &lt;h3&gt;Disconnected deployment&lt;/h3&gt; &lt;p&gt;The disconnected deployment of Open Data Hub and Kubeflow is a big topic—especially in the financial sector and &lt;a target="_blank" rel="nofollow" href="https://content.onlinexperiences.com/FMSRecording/Production/MediaCollection/VideoCollection/3484/4/320171/GitOps_for_Manufacturing_Edge.mp4"&gt;AI on the Edge&lt;/a&gt; use cases. The Kubeflow community has made attempts to solve this issue in the past. We will need to see if we can build on this work or if we should start from scratch.&lt;/p&gt; &lt;h3&gt;UBI-based Kubeflow&lt;/h3&gt; &lt;p&gt;Along with our push for a UBI-based Open Data Hub, we would like to take a look at Kubeflow components and images and find a way to port and maintain them on UBI. Reproducibility and automation are key to the long-term success of this project.&lt;/p&gt; &lt;h2&gt;Follow the roadmap!&lt;/h2&gt; &lt;p&gt;As part of creating the new roadmap, we are also redesigning the &lt;a target="_blank" rel="nofollow" href="http://opendatahub.io/docs/roadmap/future.html"&gt;Open Data Hub Roadmap on opendatahub.io&lt;/a&gt;. We will keep this document updated so that you can always see where we are in our current and future plans for Open Data Hub.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F22%2Fa-development-roadmap-for-open-data-hub%2F&amp;#38;linkname=A%20development%20roadmap%20for%20Open%20Data%20Hub" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F22%2Fa-development-roadmap-for-open-data-hub%2F&amp;#38;linkname=A%20development%20roadmap%20for%20Open%20Data%20Hub" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F22%2Fa-development-roadmap-for-open-data-hub%2F&amp;#38;linkname=A%20development%20roadmap%20for%20Open%20Data%20Hub" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F22%2Fa-development-roadmap-for-open-data-hub%2F&amp;#38;linkname=A%20development%20roadmap%20for%20Open%20Data%20Hub" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F22%2Fa-development-roadmap-for-open-data-hub%2F&amp;#38;linkname=A%20development%20roadmap%20for%20Open%20Data%20Hub" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F22%2Fa-development-roadmap-for-open-data-hub%2F&amp;#38;linkname=A%20development%20roadmap%20for%20Open%20Data%20Hub" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F22%2Fa-development-roadmap-for-open-data-hub%2F&amp;#38;linkname=A%20development%20roadmap%20for%20Open%20Data%20Hub" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F22%2Fa-development-roadmap-for-open-data-hub%2F&amp;#038;title=A%20development%20roadmap%20for%20Open%20Data%20Hub" data-a2a-url="https://developers.redhat.com/blog/2020/06/22/a-development-roadmap-for-open-data-hub/" data-a2a-title="A development roadmap for Open Data Hub"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/22/a-development-roadmap-for-open-data-hub/"&gt;A development roadmap for Open Data Hub&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/I1i3t3gCfKI" height="1" width="1" alt=""/&gt;</content><summary>Open Data Hub (ODH) is a blueprint for building an AI-as-a-Service (AIaaS) platform on Red Hat’s Kubernetes-based OpenShift 4.x. The Open Data Hub team recently released Open Data Hub 0.6.0, followed up by a smaller update of Open Data Hub 0.6.1. We recently got together and discussed our plans and timeline for the next two releases. Our plans are based on the roadmap slide deck that we put togeth...</summary><dc:creator>Václav Pavlín</dc:creator><dc:date>2020-06-22T07:00:14Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/22/a-development-roadmap-for-open-data-hub/</feedburner:origLink></entry><entry><title>Develop and test a Quarkus client on Red Hat CodeReady Containers with Red Hat Data Grid 8.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/4tzXt7GOY24/" /><category term="Big Data" scheme="searchisko:content:tags" /><category term="codeready" scheme="searchisko:content:tags" /><category term="development environment" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><author><name>Durgesh Anaokar</name></author><id>searchisko:content:id:jbossorg_blog-develop_and_test_a_quarkus_client_on_red_hat_codeready_containers_with_red_hat_data_grid_8_0</id><updated>2020-06-19T07:00:23Z</updated><published>2020-06-19T07:00:23Z</published><content type="html">&lt;p&gt;This article is about my experience installing &lt;a href="https://developers.redhat.com/products/datagrid/overview"&gt;Red Hat Data Grid (RHDG)&lt;/a&gt; on &lt;a href="https://developers.redhat.com/products/codeready-containers/overview"&gt;Red Hat CodeReady Containers (CRC)&lt;/a&gt; so that I could set up a local environment to develop and test a Quarkus Infinispan client. I started by installing CodeReady Containers and then installed Red Hat Data Grid. I am also on a learning path for &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;, so my last step was to integrate the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/infinispan-client"&gt;Quarkus Infinispan&lt;/a&gt; client into my new development environment.&lt;/p&gt; &lt;p&gt;Initially, I tried connecting the Quarkus client to my locally running instance of Data Grid. Later, I decided I wanted to create an environment where I could test and debug Data Grid on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift 4&lt;/a&gt;. I tried installing Data Grid on OpenShift 4 in a shared environment, but maintaining that environment was challenging. Through trial-and-error, I found that it was better to install Red Hat Data Grid on CodeReady Containers and use that for my local development and testing environment.&lt;/p&gt; &lt;p&gt;In this quick tutorial, I guide you through setting up a local environment to develop and test a Quarkus client—in this case, Quarkus Infinispan. The process consists of three steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Install and run CodeReady Containers.&lt;/li&gt; &lt;li&gt;Install Data Grid on CodeReady Containers.&lt;/li&gt; &lt;li&gt;Integrate the Quarkus Infinispan client into the new development environment.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&lt;span id="more-730637"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Step 1: Install and run CodeReady Containers&lt;/h2&gt; &lt;p&gt;To start, &lt;a href="https://developers.redhat.com/products/codeready-containers"&gt;download the current version of CodeReady Containers&lt;/a&gt;. If you need installation instructions, see &lt;a href="https://developers.redhat.com/blog/2019/09/05/red-hat-openshift-4-on-your-laptop-introducing-red-hat-codeready-containers/"&gt;this guide from the CodeReady Containers development team.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;After I installed CodeReady Containers, I ran the following command to set it up and start it in the same sequence:&lt;/p&gt; &lt;pre&gt;# crc setup # crc start &lt;/pre&gt; &lt;p&gt;Starting your CRC installation automatically starts OpenShift. You can check the logs at https://api.crc.testing:6443 to confirm that OpenShift is running. In the logs, you will also see the following login details:&lt;/p&gt; &lt;pre&gt;[INFO]"To access the cluster, first set up your environment by following 'crc oc-env' instructions" [INFO]"Then you can access it by running 'oc login -u developer -p developer https://api.crc.testing:6443'" [INFO]"To login as an admin, run 'oc login -u kubeadmin -p 8rynV-SeYLc-h8Ij7-YPYcz https://api.crc.testing:6443'" &lt;/pre&gt; &lt;p&gt;That&amp;#8217;s it for the first step.&lt;/p&gt; &lt;h2&gt;Step 2: Install Red Hat Data Grid on CodeReady Containers&lt;/h2&gt; &lt;p&gt;Next, you want to install the Data Grid Operator on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; (OCP). You can use either the command-line interface (CLI) or the OCP user interface (UI). I chose to use the UI for my installation. Here are the installation steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Log in to the OCP console, as shown in Figure 1. &lt;p&gt;&lt;div id="attachment_731347" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-11-50-07-CROP.png"&gt;&lt;img aria-describedby="caption-attachment-731347" class="wp-image-731347 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-11-50-07-CROP-1024x507.png" alt="A screenshot of the login dialog for OCP." width="640" height="317" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-11-50-07-CROP-1024x507.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-11-50-07-CROP-300x149.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-11-50-07-CROP-768x380.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-731347" class="wp-caption-text"&gt;Figure 1. Log in to the OpenShift Container Platform console.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;Create a project to install the Data Grid Operator, as shown in Figure 2. &lt;p&gt;&lt;div id="attachment_731357" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-11-49-42-CROP.png"&gt;&lt;img aria-describedby="caption-attachment-731357" class="wp-image-731357 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-11-49-42-CROP-1024x510.png" alt="A screenshot of the OCP project dialog." width="640" height="319" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-11-49-42-CROP-1024x510.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-11-49-42-CROP-300x150.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-11-49-42-CROP-768x383.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-731357" class="wp-caption-text"&gt;Figure 2. Create a project to install the Data Grid Operator.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;Create an instance of the Data Grid Operator. Doing this also creates the Data Grid pod, as shown in Figure 3. &lt;p&gt;&lt;div id="attachment_731387" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-12-28-09-CROP.png"&gt;&lt;img aria-describedby="caption-attachment-731387" class="wp-image-731387 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-12-28-09-CROP-1024x508.png" alt="A screenshot of the dialog to create an instance of the Data Grid Operator." width="640" height="318" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-12-28-09-CROP-1024x508.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-12-28-09-CROP-300x149.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-12-28-09-CROP-768x381.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-731387" class="wp-caption-text"&gt;Figure 3. Create an instance of the Data Grid Operator&lt;/p&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;Check the running pods on OCP: &lt;pre&gt;$ oc get pods NAME READY STATUS RESTARTS AGE example-infinispan-0 1/1 Running 0 6d4h infinispan-operator-77cd666d7d-xjqcj 1/1 Running 0 6d4h &lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;h3&gt;Gather information for your next installation&lt;/h3&gt; &lt;p&gt;After you confirm that Data Grid is installed, take note of the service IP for the Data Grid service. You will need this information when you install the Quarkus Infinispan client.&lt;/p&gt; &lt;pre&gt;$ oc get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE example-infinispan ClusterIP 172.30.51.239 &amp;#38;amp;amp;amp;lt;none&amp;#38;amp;amp;amp;gt; 11222/TCP 6d4h &lt;/pre&gt; &lt;p&gt;Next, check the user ID for Data Grid and the &lt;code&gt;clustered-openshift.xml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ oc rsh example-infinispan-0 sh-4.4$ cat /opt/infinispan/server/conf/users.properties #$REALM_NAME=default$ #Tue Jun 09 03:58:58 GMT 2020 developer=RSRKP8snxVdCbQP3 operator=brw2JVxLQw1gsF4M &lt;/pre&gt; &lt;p&gt;Finally, check the configuration files details for your &lt;code&gt;sasl-mechanism&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ oc rsh example-infinispan-0 sh-4.4$ cat /opt/infinispan/server/conf/infinispan.xml &lt;/pre&gt; &lt;p&gt;Figure 4 shows the correct output:&lt;/p&gt; &lt;div id="attachment_731457" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-10-09-25-59-CROP.png"&gt;&lt;img aria-describedby="caption-attachment-731457" class="wp-image-731457 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-10-09-25-59-CROP-1024x402.png" alt="A screenshot of the output." width="640" height="251" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-10-09-25-59-CROP-1024x402.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-10-09-25-59-CROP-300x118.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-10-09-25-59-CROP-768x302.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-731457" class="wp-caption-text"&gt;Figure 4. The output from a successful Red Hat Data Grid installation.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Install and run the Quarkus Infinispan client&lt;/h2&gt; &lt;p&gt;Finally, you can install and run the Quarkus Infinispan client.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://code.quarkus.io/"&gt;Download the client from Quarkus.io&lt;/a&gt;, as shown in Figure 5. &lt;p&gt;&lt;div id="attachment_731407" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-12-44-08-CROP.png"&gt;&lt;img aria-describedby="caption-attachment-731407" class="wp-image-731407 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-12-44-08-CROP-1024x531.png" alt="A screenshot of the download page on Quarkus.io." width="640" height="332" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-12-44-08-CROP-1024x531.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-12-44-08-CROP-300x156.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screenshot-from-2020-06-09-12-44-08-CROP-768x398.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-731407" class="wp-caption-text"&gt;Figure 5. Download the Quarkus Infinispan client from Quarkus.io.&lt;/p&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;Once you have Quarkus Infinispan, extract the client code. Test the code against your local Data Grid instance to ensure that it is working.&lt;/li&gt; &lt;li&gt;Assuming the code works, add the following values to the Infinispan client&amp;#8217;s &lt;code&gt;application.properties&lt;/code&gt; file (see the &lt;code&gt;pod/service&lt;/code&gt; directory for these values): &lt;pre&gt;# The IP should be CLUSTER-IP shown by oc get svc for RHDG deployment Quarkus.infinispan-client.server-list=172.30.51.239:11222 #The following would be the authentication details for the RHDG installed Quarkus.infinispan-client.auth-username=developer Quarkus.infinispan-client.auth-password=RSRKP8snxVdCbQP3 Quarkus.infinispan-client.use-auth=true Quarkus.infinispan-client.sasl-mechanism=DIGEST-MD5 #you can choose the sasl machenism and set it here Quarkus.kubernetes-client.trust-certs=true Quarkus.infinispan-client.client-intelligence=BASIC #The following properties are required to push the build to OCP Quarkus.openshift.expose=true Quarkus.kubernetes.deployment-target=openshift Quarkus.s2i.base-jvm-image=registry.access.redhat.com/openjdk/openjdk-11-rhel7 &lt;/pre&gt; &lt;/li&gt; &lt;li&gt;After you have updated the &lt;code&gt;application.properties&lt;/code&gt; file, run this command at the project&amp;#8217;s base directory: &lt;pre&gt;./mvnw clean package -DQuarkus.kubernetes.deploy=true &lt;/pre&gt; &lt;p&gt;The application will be deployed to CodeReady Containers, and you should see the following logs:&lt;/p&gt; &lt;pre&gt;[INFO] [io.Quarkus.kubernetes.deployment.KubernetesDeployer] Deploying to openshift server: https://api.crc.testing:6443/ in namespace: testrhdg. [INFO] [io.Quarkus.kubernetes.deployment.KubernetesDeployer] Applied: ServiceAccount infinispan-client-quickstart. [INFO] [io.Quarkus.kubernetes.deployment.KubernetesDeployer] Applied: Service infinispan-client-quickstart. [INFO] [io.Quarkus.kubernetes.deployment.KubernetesDeployer] Applied: ImageStream infinispan-client-quickstart. [INFO] [io.Quarkus.kubernetes.deployment.KubernetesDeployer] Applied: ImageStream openjdk-11-rhel7. [INFO] [io.Quarkus.kubernetes.deployment.KubernetesDeployer] Applied: BuildConfig infinispan-client-quickstart. [INFO] [io.Quarkus.kubernetes.deployment.KubernetesDeployer] Applied: DeploymentConfig infinispan-client-quickstart. [INFO] [io.Quarkus.kubernetes.deployment.KubernetesDeployer] Applied: Route infinispan-client-quickstart. [INFO] [io.Quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 120321ms [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 02:06 min [INFO] Finished at: 2020-06-10T07:04:53+05:30 [INFO] ------------------------------------------------------------------------ &lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt; &lt;h3&gt;Check your installation&lt;/h3&gt; &lt;p&gt;You can run additional checks to ensure that the Infinispan client is running in your development environment. First, check the new pods that were created with the Quarkus Infinispan build:&lt;/p&gt; &lt;pre&gt;$ oc get pods NAME READY STATUS RESTARTS AGE example-infinispan-0 1/1 Running 0 6d22h infinispan-client-quickstart-1-build 0/1 Completed 0 2m50s infinispan-client-quickstart-1-deploy 0/1 Completed 0 72s infinispan-client-quickstart-1-hlwg6 1/1 Running 0 66s infinispan-operator-77cd666d7d-xjqcj 1/1 Running 0 6d22h &lt;/pre&gt; &lt;p&gt;Second, check the route for the newly deployed service and access it:&lt;/p&gt; &lt;pre&gt;$ oc get routes NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD infinispan-client-quickstart infinispan-client-quickstart-testrhdg.apps-crc.testing / infinispan-client-quickstart 8081 None &lt;/pre&gt; &lt;p&gt;Now you can access the client in any web browser at http://infinispan-client-quickstart-testrhdg.apps-crc.testing/infinispan, or on the command line, and play with it. As an example, you could add more interfaces to the client code, which would allow you to perform different operations with Red Hat Data Grid.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, I showed you what I did to create a client for Infinispan with the help of Quarkus. I also showed you how to run the client on OpenShift 4.x for an installed Red Hat Data Grid 8.0 instance. There might be a more sophisticated way to implement the same solution or find values from the OpenShift cluster. I hope sharing my experience will be helpful to others.&lt;/p&gt; &lt;p&gt;Download the source code for these examples from my &lt;a target="_blank" rel="nofollow" href="https://github.com/durgeshanaokar/testprojects/tree/master/infinispan-client-quickstart"&gt;Infinispan Client Quickstart&lt;/a&gt; on GitHub.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F19%2Fdevelop-and-test-a-quarkus-client-on-red-hat-codeready-containers-with-red-hat-data-grid-8-0%2F&amp;#38;linkname=Develop%20and%20test%20a%20Quarkus%20client%20on%20Red%20Hat%20CodeReady%20Containers%20with%20Red%20Hat%20Data%20Grid%208.0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F19%2Fdevelop-and-test-a-quarkus-client-on-red-hat-codeready-containers-with-red-hat-data-grid-8-0%2F&amp;#38;linkname=Develop%20and%20test%20a%20Quarkus%20client%20on%20Red%20Hat%20CodeReady%20Containers%20with%20Red%20Hat%20Data%20Grid%208.0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F19%2Fdevelop-and-test-a-quarkus-client-on-red-hat-codeready-containers-with-red-hat-data-grid-8-0%2F&amp;#38;linkname=Develop%20and%20test%20a%20Quarkus%20client%20on%20Red%20Hat%20CodeReady%20Containers%20with%20Red%20Hat%20Data%20Grid%208.0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F19%2Fdevelop-and-test-a-quarkus-client-on-red-hat-codeready-containers-with-red-hat-data-grid-8-0%2F&amp;#38;linkname=Develop%20and%20test%20a%20Quarkus%20client%20on%20Red%20Hat%20CodeReady%20Containers%20with%20Red%20Hat%20Data%20Grid%208.0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F19%2Fdevelop-and-test-a-quarkus-client-on-red-hat-codeready-containers-with-red-hat-data-grid-8-0%2F&amp;#38;linkname=Develop%20and%20test%20a%20Quarkus%20client%20on%20Red%20Hat%20CodeReady%20Containers%20with%20Red%20Hat%20Data%20Grid%208.0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F19%2Fdevelop-and-test-a-quarkus-client-on-red-hat-codeready-containers-with-red-hat-data-grid-8-0%2F&amp;#38;linkname=Develop%20and%20test%20a%20Quarkus%20client%20on%20Red%20Hat%20CodeReady%20Containers%20with%20Red%20Hat%20Data%20Grid%208.0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F19%2Fdevelop-and-test-a-quarkus-client-on-red-hat-codeready-containers-with-red-hat-data-grid-8-0%2F&amp;#38;linkname=Develop%20and%20test%20a%20Quarkus%20client%20on%20Red%20Hat%20CodeReady%20Containers%20with%20Red%20Hat%20Data%20Grid%208.0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F06%2F19%2Fdevelop-and-test-a-quarkus-client-on-red-hat-codeready-containers-with-red-hat-data-grid-8-0%2F&amp;#038;title=Develop%20and%20test%20a%20Quarkus%20client%20on%20Red%20Hat%20CodeReady%20Containers%20with%20Red%20Hat%20Data%20Grid%208.0" data-a2a-url="https://developers.redhat.com/blog/2020/06/19/develop-and-test-a-quarkus-client-on-red-hat-codeready-containers-with-red-hat-data-grid-8-0/" data-a2a-title="Develop and test a Quarkus client on Red Hat CodeReady Containers with Red Hat Data Grid 8.0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/06/19/develop-and-test-a-quarkus-client-on-red-hat-codeready-containers-with-red-hat-data-grid-8-0/"&gt;Develop and test a Quarkus client on Red Hat CodeReady Containers with Red Hat Data Grid 8.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/4tzXt7GOY24" height="1" width="1" alt=""/&gt;</content><summary>This article is about my experience installing Red Hat Data Grid (RHDG) on Red Hat CodeReady Containers (CRC) so that I could set up a local environment to develop and test a Quarkus Infinispan client. I started by installing CodeReady Containers and then installed Red Hat Data Grid. I am also on a learning path for Quarkus, so my last step was to integrate the Quarkus Infinispan client into my ne...</summary><dc:creator>Durgesh Anaokar</dc:creator><dc:date>2020-06-19T07:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/06/19/develop-and-test-a-quarkus-client-on-red-hat-codeready-containers-with-red-hat-data-grid-8-0/</feedburner:origLink></entry></feed>
